name: Helm Deploy with Detailed Job Summary

on:
  workflow_call:
    secrets:
      DIGITAL_OCEAN_API_KEY:
        description: 'DigitalOcean API Key'
        required: true
  workflow_dispatch:

jobs:
  deploy-helm:
    name: Deploy Helm Charts and Record Stats
    runs-on: self-hosted
    outputs:
      deploymentStats: ${{ steps.collect-stats.outputs.stats }}
      overallStats: ${{ steps.collect-stats.outputs.overall }}
    strategy:
      matrix:
        environment: [ staging ]
    env:
      DO_CLUSTER_NAME: ${{ matrix.environment }}-doks-cluster
      DO_KUBECONFIG_FILE: './doks-kubeconfig'
      DO_CLI_VERSION: '1.119.1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup required tools (kubectl, helm, doctl, yq, etc.)
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: latest

      - name: Install doctl (DigitalOcean CLI)
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v${{ env.DO_CLI_VERSION }}/doctl-${{ env.DO_CLI_VERSION }}-linux-amd64.tar.gz | tar -xz
          sudo mv doctl /usr/local/bin

      - name: Authenticate doctl
        run: doctl auth init --access-token ${{ secrets.DIGITAL_OCEAN_API_KEY }}

      - name: Fetch DOKS kubeconfig
        run: doctl kubernetes cluster kubeconfig save $DO_CLUSTER_NAME

      - name: Configure kubeconfig
        run: |
          export KUBECONFIG=$DO_KUBECONFIG_FILE

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.5/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # Loop through chart directories, deploy each chart with timing & error capture.
      - name: Deploy Charts with Timing and Status
        run: |
          # Create a CSV file with header: Chart,Namespace,Time,Status,Error
          echo "Chart,Namespace,Time,Status,Error" > deployment-stats.csv
          
          # Define a helper function to deploy a chart
          deploy_chart() {
            chartDir=$1
            if [ -d "$chartDir" ]; then
              chartName=$(basename "$chartDir")
              # Read namespace from the chart's values.yaml; default to "default" if not set
              namespace=$(yq e '.namespace' "$chartDir/values.yaml" || echo "default")

              # Detect if this chart is a ClusterIssuer
              is_cluster_issuer=$(grep -q "kind: ClusterIssuer" "$chartDir/templates/"* && echo "true" || echo "false")

              echo "Deploying chart '$chartName'..."
              start=$(date +%s)

              # Build Helm arguments dynamically
              helmArgs=(
                upgrade
                --install
                "$chartName"
                "$chartDir"
                --values "$chartDir/values.yaml"
                --wait
                --timeout 10m
                --force
              )

              # Only add namespace for non-cluster-wide resources
              if [ "$is_cluster_issuer" != "true" ]; then
                helmArgs+=(--namespace "$namespace" --create-namespace)
              fi

              # Execute Helm deployment
              if helm dependency update "$chartDir" && helm "${helmArgs[@]}"; then
                status="Success ✅"
                error=""
              else
                status="Failed ❌"
                error="Deployment failed"
              fi
              end=$(date +%s)
              duration=$((end - start))
              duration_formatted=$(printf "%02d:%02d:%02d" $((duration/3600)) $(((duration % 3600)/60)) $((duration % 60)))
              echo "$chartName,$namespace,$duration_formatted,$status,$error" >> deployment-stats.csv
            fi
          }
          
          # Process each group of charts – repeat for each directory as needed
          for chart in ./ops/helm/010-bootstrap/*; do
            deploy_chart "$chart"
          done
          
          for chart in ./ops/helm/011-docker-registry/*; do
            deploy_chart "$chart"
          done
          
          for chart in ./ops/helm/020-issuers/*; do
            deploy_chart "$chart"
          done
          
          for chart in ./ops/helm/030-runners-controller/*; do
            deploy_chart "$chart"
          done
          
          for chart in ./ops/helm/031-runners/*; do
            deploy_chart "$chart"
          done
          
          for chart in ./ops/helm/040-ingress/*; do
            deploy_chart "$chart"
          done
          
          for chart in ./ops/helm/050-services/*; do
            deploy_chart "$chart"
          done
          
          # Compute overall stats: total charts deployed and total cumulative duration in seconds
          total_duration=0
          count=0
          while IFS=, read -r chart namespace time status error; do
            if [ "$chart" = "Chart" ]; then continue; fi
            IFS=: read -r hh mm ss <<< "$time"
            seconds=$((10#$hh * 3600 + 10#$mm * 60 + 10#$ss))
            total_duration=$((total_duration + seconds))
            count=$((count + 1))
          done < deployment-stats.csv
          overall_formatted=$(printf "%02d:%02d:%02d" $((total_duration/3600)) $(((total_duration % 3600)/60)) $((total_duration % 60)))
          echo "Overall, $count charts deployed in $overall_formatted ⏱️" > overall-stats.txt

      - name: Collect Deployment Stats
        id: collect-stats
        run: |
          stats=$(cat deployment-stats.csv)
          overall=$(cat overall-stats.txt)
          {
            echo "stats<<EOF"
            echo "$stats"
            echo "EOF"
            echo "overall<<EOF"
            echo "$overall"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  set-job-summary:
    name: Create Detailed Job Summary
    needs: deploy-helm
    runs-on: arc-runner-set
    steps:
      - name: Generate Job Summary with Deployment Stats
        uses: actions/github-script@v7
        with:
          script: |
            const statsCSV = process.env.DEPLOYMENT_STATS || '';
            const overallStats = process.env.OVERALL_STATS || '';

            core.summary.addHeading('Deployment Overview', 2);
            core.summary.addRaw(overallStats).addEOL().addSeparator();

            if (!statsCSV) {
              core.summary.addRaw('No deployment statistics available.').addEOL();
            } else {
              const lines = statsCSV.trim().split('\n');
              const header = lines.shift().split(',');
              const dataRows = lines.map(line => line.split(','));

              await core.summary
                .addHeading('Per-Chart Deployment Details', 3)
                .addTable([header, ...dataRows])
                .write();
            }
        env:
          DEPLOYMENT_STATS: ${{ needs.deploy-helm.outputs.deploymentStats }}
          OVERALL_STATS: ${{ needs.deploy-helm.outputs.overall }}
