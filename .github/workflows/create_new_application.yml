name: "[Call] Create New Application"

on:
  workflow_call:
    inputs:
      application_name:
        description: "the name of the application (new repo name)"
        required: true
        type: string
    secrets:
      WEBGRIP_CI_CLIENT_ID:
        description: "GitHub App ID (numeric)"
        required: true
      WEBGRIP_CI_APP_PRIVATE_KEY:
        description: "GitHub App private key (PEM)"
        required: true

jobs:
  bootstrap:
    runs-on: arc-runner-set

    env:
      ORG: ${{ github.repository_owner }}
      NEW_REPO: ${{ inputs.application_name }}
      TEMPLATE_OWNER: webgrip
      TEMPLATE_REPO: application-template
      REPLACE_TOKEN: "application-application"
      VISIBILITY: "public"
      AI_CHANGE: "no"
      APP_BOT_SLUG: ${{ vars.WEBGRIP_CI_BOT_NAME || 'webgrip-ci' }}

    steps:
      # Optional: avoid the local git "Using 'master'..." hint in checkout logs.
      - name: Silence local git init default-branch hint
        run: git config --global init.defaultBranch main

      - name: Mint GitHub App installation token (owner-based)
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.WEBGRIP_CI_CLIENT_ID }}
          private-key: ${{ secrets.WEBGRIP_CI_APP_PRIVATE_KEY }}
          owner: ${{ env.ORG }}

      - name: Create repo from template (no history)
        id: gen
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const name = process.env.NEW_REPO;
            const isPrivate = (process.env.VISIBILITY !== 'public');

            const r = await github.request('POST /repos/{template_owner}/{template_repo}/generate', {
              template_owner: process.env.TEMPLATE_OWNER,
              template_repo: process.env.TEMPLATE_REPO,
              owner: org,
              name,
              private: isPrivate,
              include_all_branches: false
            });
            core.info(`Generated repo: ${r.data.full_name}`);

      - name: Wait for default branch to be ready
        id: wait-default-branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;

            const start = Date.now();
            const timeoutMs = 180_000;  // 3 minutes
            let sleepMs = 2_000;        // start at 2s
            const maxSleepMs = 10_000;  // cap at 10s

            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            async function branchReady() {
              // 1) discover default branch
              const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
              const defaultBranch = repoData.default_branch || 'main';

              // 2) ensure the branch exists and has a commit
              try {
                const { data: b } = await github.request(
                  'GET /repos/{owner}/{repo}/branches/{branch}',
                  { owner, repo, branch: defaultBranch }
                );
                if (b?.commit?.sha) return defaultBranch;
              } catch (_) { /* not ready yet */ }

              // 3) fallback: try to resolve commit directly by ref
              try {
                const { data: c } = await github.request(
                  'GET /repos/{owner}/{repo}/commits/{ref}',
                  { owner, repo, ref: defaultBranch }
                );
                if (c?.sha) return defaultBranch;
              } catch (_) { /* not ready yet */ }

              return null;
            }

            while (Date.now() - start < timeoutMs) {
              const br = await branchReady();
              if (br) {
                core.info(`Default branch '${br}' is ready.`);
                core.setOutput('default_branch', br);
                core.exportVariable('DEFAULT_BRANCH', br);
                return;
              }
              core.info(`Default branch not ready yet; sleeping ${sleepMs}ms...`);
              await sleep(sleepMs);
              sleepMs = Math.min(maxSleepMs, Math.floor(sleepMs * 1.6));
            }

            core.setFailed('Timed out waiting for the new repo default branch and first commit.');

      - name: Check out the NEW repo (detected default branch)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ORG }}/${{ env.NEW_REPO }}
          ref: ${{ steps.wait-default-branch.outputs.default_branch }}
          fetch-depth: 0
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Replace token in file contents
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ env.REPLACE_TOKEN }}
          replace: ${{ env.NEW_REPO }}
          include: "**/*"
          exclude: ".git/**"
          regex: false

      - name: Rename files & directories
        shell: bash
        run: |
          set -euo pipefail
          token="${REPLACE_TOKEN}"
          repl="${NEW_REPO}"
          while IFS= read -r -d '' p; do
            base="$(basename "$p")"
            newbase="${base//$token/$repl}"
            if [[ "$base" != "$newbase" ]]; then
              dir="$(dirname "$p")"
              git mv "$p" "${dir}/${newbase}"
            fi
          done < <(find . -depth -name "*${token}*" -print0)

      - name: Resolve bot noreply email (via public user lookup)
        id: bot-email
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const slug = process.env.APP_BOT_SLUG;
            const username = `${slug}[bot]`;
            const { data: user } = await github.request('GET /users/{username}', { username });
            core.setOutput('name', username);
            core.setOutput('email', `${user.id}+${username}@users.noreply.github.com`);

      - name: Authenticate git remote for push
        env:
          APP_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git remote set-url origin "https://x-access-token:${APP_TOKEN}@github.com/${ORG}/${NEW_REPO}.git"

      - name: Commit and push
        run: |
          git config user.name  "${{ steps.bot-email.outputs.name || 'github-actions[bot]' }}"
          git config user.email "${{ steps.bot-email.outputs.email || '41898282+github-actions[bot]@users.noreply.github.com' }}"
          git add -A
          git commit -m "chore(init): personalize ${NEW_REPO}" || echo "Nothing to commit"
          git push origin HEAD:${DEFAULT_BRANCH:-main}
