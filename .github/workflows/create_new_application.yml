name: "[Call] Create New Application"

on:
  workflow_call:
    inputs:
      application_name:
        description: "the name of the application (new repo name)"
        required: true
        type: string
    secrets:
      WEBGRIP_CI_CLIENT_ID:
        description: "GitHub App ID (numeric)"
        required: true
      WEBGRIP_CI_APP_PRIVATE_KEY:
        description: "GitHub App private key (PEM)"
        required: true

jobs:
  bootstrap:
    runs-on: arc-runner-set

    name: ${{ inputs.application_name }}

    env:
      ORG: ${{ github.repository_owner }}
      NEW_REPO: ${{ inputs.application_name }}
      TEMPLATE_OWNER: webgrip
      TEMPLATE_REPO: application-template
      REPLACE_TOKEN: "application-application"
      VISIBILITY: "public"
      AI_CHANGE: "no"
      APP_BOT_SLUG: ${{ vars.WEBGRIP_CI_BOT_NAME || 'webgrip-ci' }}

    steps:
      - name: Silence local git init default-branch hint
        run: git config --global init.defaultBranch main

      - name: Mint GitHub App installation token (owner-based)
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.WEBGRIP_CI_CLIENT_ID }}
          private-key: ${{ secrets.WEBGRIP_CI_APP_PRIVATE_KEY }}
          owner: ${{ env.ORG }}

      - name: Create repo from template (no history)
        id: gen
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const name = process.env.NEW_REPO;
            const isPrivate = (process.env.VISIBILITY !== 'public');

            const r = await github.request('POST /repos/{template_owner}/{template_repo}/generate', {
              template_owner: process.env.TEMPLATE_OWNER,
              template_repo: process.env.TEMPLATE_REPO,
              owner: org,
              name,
              private: isPrivate,
              include_all_branches: false
            });
            core.info(`Generated repo: ${r.data.full_name}`);

      - name: Wait for initial default branch
        id: wait-default-branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;
            const start = Date.now();
            const timeoutMs = 180_000;
            let sleepMs = 2_000;
            const maxSleepMs = 10_000;
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));
            async function ready() {
              const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
              const branch = repoData.default_branch || 'main';
              try {
                const { data: b } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', { owner, repo, branch });
                if (b?.commit?.sha) return { branch, sha: b.commit.sha };
              } catch {}
              try {
                const { data: c } = await github.request('GET /repos/{owner}/{repo}/commits/{ref}', { owner, repo, ref: branch });
                if (c?.sha) return { branch, sha: c.sha };
              } catch {}
              return null;
            }
            while (Date.now() - start < timeoutMs) {
              const info = await ready();
              if (info) {
                core.setOutput('initial_branch', info.branch);
                core.setOutput('initial_sha', info.sha);
                core.exportVariable('INITIAL_BRANCH', info.branch);
                core.exportVariable('INITIAL_SHA', info.sha);
                return;
              }
              await sleep(sleepMs);
              sleepMs = Math.min(maxSleepMs, Math.floor(sleepMs * 1.6));
            }
            core.setFailed('Timed out waiting for the new repo default branch and first commit.');

      - name: Create development branch from initial commit
        id: create-dev
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;
            const fromSha = process.env.INITIAL_SHA || "${{ steps.wait-default-branch.outputs.initial_sha }}";
            try {
              await github.request('GET /repos/{owner}/{repo}/branches/{branch}', { owner, repo, branch: 'development' });
            } catch {
              await github.request('POST /repos/{owner}/{repo}/git/refs', {
                owner, repo,
                ref: 'refs/heads/development',
                sha: fromSha
              });
            }

      - name: Set default branch to development
        id: set-default
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.request('PATCH /repos/{owner}/{repo}', {
              owner: process.env.ORG,
              repo: process.env.NEW_REPO,
              default_branch: 'development'
            });

      - name: Check out new repo (development)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ORG }}/${{ env.NEW_REPO }}
          ref: development
          fetch-depth: 0
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Mass replace content + rename paths
        uses: actions/github-script@v7
        env:
          TOKEN: ${{ env.REPLACE_TOKEN }}
          REPL: ${{ env.NEW_REPO }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const root = process.env.GITHUB_WORKSPACE || process.cwd();
            const token = process.env.TOKEN;
            const repl  = process.env.REPL;

            function isDir(p) { try { return fs.statSync(p).isDirectory(); } catch { return false; } }
            function isFile(p) { try { return fs.statSync(p).isFile(); } catch { return false; } }

            function walk(dir) {
              const out = [];
              for (const entry of fs.readdirSync(dir)) {
                if (entry === '.git') continue;
                const full = path.join(dir, entry);
                out.push(full);
                if (isDir(full)) out.push(...walk(full));
              }
              return out;
            }

            // 1) Delete CHANGELOG.md if present at repo root
            const changelog = path.join(root, 'CHANGELOG.md');
            if (fs.existsSync(changelog)) {
              fs.rmSync(changelog, { force: true });
              core.info('Removed root CHANGELOG.md');
            }

            // 2) Replace token inside file contents (best-effort on text files)
            const all = walk(root);
            const files = all.filter(isFile);
            let replacedCount = 0;

            for (const file of files) {
              try {
                // skip likely-binary by quick sniff for NULs
                const buf = fs.readFileSync(file);
                if (buf.includes(0)) continue;
                let txt = buf.toString('utf8');
                if (!txt.includes(token)) continue;
                const newTxt = txt.split(token).join(repl);
                if (newTxt !== txt) {
                  fs.writeFileSync(file, newTxt, 'utf8');
                  replacedCount++;
                }
              } catch { /* ignore */ }
            }
            core.info(`Replaced contents in ${replacedCount} file(s).`);

            // 3) Rename files & directories whose names contain the token (deepest-first)
            const pathsToRename = all
              .filter(p => p.includes(token))
              .sort((a, b) => b.length - a.length);

            let renameCount = 0;
            for (const oldPath of pathsToRename) {
              const newPath = oldPath.split(token).join(repl);
              if (newPath === oldPath) continue;
              const newDir = isDir(oldPath) ? newPath : path.dirname(newPath);
              fs.mkdirSync(newDir, { recursive: true });
              try {
                fs.renameSync(oldPath, newPath);
                renameCount++;
              } catch (e) {
                core.warning(`Rename failed ${oldPath} -> ${newPath}: ${e.message}`);
              }
            }
            core.info(`Renamed ${renameCount} path(s).`);

      - name: Resolve bot noreply email
        id: bot-email
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const slug = process.env.APP_BOT_SLUG;
            const username = `${slug}[bot]`;
            try {
              const { data: user } = await github.request('GET /users/{username}', { username });
              core.setOutput('name', username);
              core.setOutput('email', `${user.id}+${username}@users.noreply.github.com`);
            } catch {
              core.setOutput('name', 'github-actions[bot]');
              core.setOutput('email', '41898282+github-actions[bot]@users.noreply.github.com');
            }

      - name: Authenticate git remote for push
        env:
          APP_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git remote set-url origin "https://x-access-token:${APP_TOKEN}@github.com/${ORG}/${NEW_REPO}.git"

      - name: Commit and push to development
        run: |
          git config user.name  "${{ steps.bot-email.outputs.name }}"
          git config user.email "${{ steps.bot-email.outputs.email }}"
          git add -A
          git commit -m "chore(init): personalize ${NEW_REPO}" || echo "Nothing to commit"
          git push origin HEAD:development

      - name: Protect branches (main & development)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const owner = process.env.ORG;
            const repo  = process.env.NEW_REPO;
            const protection = {
              required_status_checks: { strict: true, contexts: [] },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                require_code_owner_reviews: true,
                dismiss_stale_reviews: true
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              required_linear_history: true
            };
            async function protect(branch) {
              try {
                await github.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection', {
                  owner, repo, branch,
                  ...protection,
                  mediaType: { previews: ['luke-cage'] }
                });
              } catch (e) {
                core.setFailed(`Failed to protect ${branch}: ${e.message}`);
              }
            }
            await protect('main');
            await protect('development');
