name: "Create New Application"

on:
  workflow_call:
    inputs:
      application_name:
        description: 'the name of the application'
        required: true
        type: string
    secrets:
      WEBGRIP_CI_CLIENT_ID:
        description: 'GitHub App Client ID'
        required: true
      WEBGRIP_CI_APP_PRIVATE_KEY:
        description: 'GitHub App Private RSA Key'
        required: true

jobs:
  bootstrap:
    runs-on: arc-runner-set
    env:
      ORG: ${{ github.repository_owner }}
      NEW_REPO: ${{ inputs.application_name }}
      TEMPLATE_OWNER: webgrip
      TEMPLATE_REPO: application-template
      REPLACE_TOKEN: "application-application"
      VISIBILITY: "public"
      AI_CHANGE: "yes"

    steps:
      - name: Mint GitHub App installation token (owner-based)
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.WEBGRIP_CI_CLIENT_ID }}
          private-key: ${{ secrets.WEBGRIP_CI_APP_PRIVATE_KEY }}
          owner: ${{ env.ORG }}

      - name: Create repo from template (no history)
        id: gen
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const org = process.env.ORG;
            const name = process.env.NEW_REPO;
            const isPrivate = (process.env.VISIBILITY !== 'public');

            const r = await github.request('POST /repos/{template_owner}/{template_repo}/generate', {
              template_owner: process.env.TEMPLATE_OWNER,
              template_repo: process.env.TEMPLATE_REPO,
              owner: org,
              name,
              private: isPrivate,
              include_all_branches: false
            });
            core.info(`Generated repo: ${r.data.full_name}`);

      - name: Check out the NEW repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ORG }}/${{ env.NEW_REPO }}
          fetch-depth: 0
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      - name: Replace token in file contents
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ env.REPLACE_TOKEN }}
          replace: ${{ env.NEW_REPO }}
          include: "**/*"
          exclude: ".git/**"
          regex: false

      - name: Rename files & directories
        shell: bash
        run: |
          set -euo pipefail
          token="${REPLACE_TOKEN}"
          repl="${NEW_REPO}"
          # Rename deepest paths first so children move before parents
          while IFS= read -r -d '' p; do
            base="$(basename "$p")"
            newbase="${base//$token/$repl}"
            if [[ "$base" != "$newbase" ]]; then
              dir="$(dirname "$p")"
              git mv "$p" "${dir}/${newbase}"
            fi
          done < <(find . -depth -name "*${token}*" -print0)

      - name: Commit template initialization
        run: |
          git config user.name "webgrip-ci[bot]"
          git config user.email "${{ secrets.WEBGRIP_CI_APP_ID }}+[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(init): personalize ${NEW_REPO}" || echo "Nothing to commit"
          git push origin HEAD:main

    #   - name: Codex-style AI change (public action)
    #     if: env.AI_CHANGE == 'yes'
    #     uses: mirrajabi/aider-github-action@v1.1.0
    #     with:
    #       api_key_env_name: OPENAI_API_KEY
    #       api_key_env_value: ${{ secrets.OPENAI_API_KEY }}
    #       branch: main
    #       model: gpt-4o-mini
    #       aider_args: >
    #         --yes
    #         --message "Update README for '${{ env.NEW_REPO }}' with a concise intro + Quickstart.
    #         Keep the diff minimal."