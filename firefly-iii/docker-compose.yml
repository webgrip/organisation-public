services:
  # Reverse proxy - only service that exposes host ports
  firefly-iii-application.nginx:
    container_name: firefly-iii-application.nginx
    image: webgrip/firefly-iii-application.nginx:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/nginx/Dockerfile
    restart: always
    depends_on:
      firefly-iii-application.application:
        condition: service_healthy
    # Note: importer healthchecks can be flaky; nginx only needs the application service
    # firefly-iii-application.importer:
    #   condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  firefly-iii-application.application:
    container_name: firefly-iii-application.application
    image: webgrip/firefly-iii-application.application:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/application/Dockerfile
    restart: always
    depends_on:
      firefly-iii-application.postgres:
        condition: service_healthy
      firefly-iii-application.redis:
        condition: service_healthy
    # Removed host port mapping - only internal exposure
    expose:
      - "8080"
    env_file:
      - .env
      - .env.app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 60s
    volumes:
      - firefly-iii-application-application-data:/var/www/html/storage

  firefly-iii-application.postgres:
    container_name: firefly-iii-application.postgres
    image: webgrip/firefly-iii-application.postgres:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/postgres/Dockerfile
    restart: unless-stopped
    # Removed host port mapping - only internal exposure
    expose:
      - "5432"
    logging:
      options:
        max-size: 10m
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_DATABASE:-}
      POSTGRES_USER: ${DB_USERNAME:-}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - firefly-iii-application-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 5s
      timeout: 3s
      retries: 20

  # firefly-iii-application.mariadb:
  #   container_name: firefly-iii-application.mariadb
  #   image: webgrip/firefly-iii-application.mariadb:latest
  #   build:
  #     context: .
  #     dockerfile: ops/docker/mariadb/Dockerfile
  #   pull_policy: never
  #   restart: unless-stopped
  #   # Removed host port mapping - only internal exposure
  #   expose:
  #     - "3306"
  #   logging:
  #     options:
  #       max-size: 10m
  #   env_file:
  #     - ./.env
  #   environment:
  #     MARIADB_DATABASE: ${DB_DATABASE:-}
  #     MARIADB_USER: ${DB_USERNAME:-}
  #     MARIADB_PASSWORD: ${DB_PASSWORD:-}
  #     MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-}
  #     MARIADB_CHARACTER_SET_SERVER: utf8mb4
  #     MARIADB_COLLATION_SERVER: utf8mb4_unicode_ci
  #   volumes:
  #     - firefly-iii-application-mariadb-data:/var/lib/mysql
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         'mariadb --socket=/var/run/mysqld/mysqld.sock --user="${DB_USERNAME:-}" --password="${DB_PASSWORD:-}" --protocol=TCP --execute="SELECT 1" >/dev/null 2>&1 || exit 1',
  #       ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #     start_period: 30s

  firefly-iii-application.redis:
    container_name: firefly-iii-application.redis
    image: webgrip/firefly-iii-application.redis:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/redis/Dockerfile
    restart: always
    # Removed host port mapping - only internal exposure
    expose:
      - "6379"
    env_file:
      - .env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - firefly-iii-application-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  firefly-iii-application.cron:
    container_name: firefly-iii-application.cron
    image: webgrip/firefly-iii-application.cron:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/cron/Dockerfile
    restart: always
    depends_on:
      firefly-iii-application.application:
        condition: service_healthy
      firefly-iii-application.postgres:
        condition: service_healthy
    env_file:
      - .env
      - .env.app
    volumes:
      - firefly-iii-application-application-data:/var/www/html/storage
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pgrep cron >/dev/null 2>&1 || pgrep crond >/dev/null 2>&1",
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  firefly-iii-application.importer:
    container_name: firefly-iii-application.importer
    image: webgrip/firefly-iii-application.importer:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/importer/Dockerfile
    restart: always
    depends_on:
      firefly-iii-application.application:
        condition: service_healthy
    # Use internal port 8080 for importer (official image default)
    expose:
      - "8080"
    env_file:
      - .env
      - .env.importer
    volumes:
      - firefly-iii-application-importer-data:/var/www/html/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  firefly-iii-application-application-data:
  firefly-iii-application-postgres-data:
  firefly-iii-application-redis-data:
  firefly-iii-application-importer-data:
  # firefly-iii-application-mariadb-data:  # Uncomment if using MariaDB

networks:
  default:
    external: true
    name: webgrip
