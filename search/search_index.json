{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebGrip Organisation Public Platform","text":"<p>Welcome to the complete documentation for the WebGrip Organisation Public Platform - the foundational infrastructure repository that powers our Kubernetes-based development and operations platform.</p>"},{"location":"#what-is-this-repository","title":"What is This Repository?","text":"<p>This repository serves as the single source of truth for:</p> <ul> <li>\ud83c\udfd7\ufe0f Infrastructure Configuration: Kubernetes cluster setup via Helm charts</li> <li>\ud83d\udccb Service Catalog: Backstage entity definitions for domains, systems, and components</li> <li>\u2699\ufe0f CI/CD Automation: GitHub Actions workflows for platform operations</li> <li>\ud83d\udd10 Secret Management: SOPS-encrypted configuration via Age</li> <li>\ud83d\udcca Observability: Grafana dashboards and monitoring configuration</li> <li>\ud83d\udcda Architecture Decisions: ADRs documenting platform choices</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>\ud83c\udfd7\ufe0f Cluster Architecture<p>Core infrastructure, networking, security model, and resource management</p> </li> </ul> <ul> <li>\ud83d\udd27 Platform Components<p>Ingress, certificates, monitoring, CI/CD infrastructure, and secrets</p> </li> </ul> <ul> <li>\ud83d\udccb Service Catalog<p>Backstage integration, domains, systems, and component registry</p> </li> </ul> <ul> <li>\ud83d\udcd6 Operations Runbooks<p>Deployment procedures, monitoring, incident response, and maintenance</p> </li> </ul> <ul> <li>\ud83d\udc68\u200d\ud83d\udcbb Developer Workflows<p>Onboarding guide, application templates, CI/CD patterns, and local development</p> </li> </ul> <ul> <li>\u2696\ufe0f Governance &amp; Standards<p>Architecture decisions, security policies, and operational standards</p> </li> </ul>"},{"location":"#platform-overview","title":"Platform Overview","text":""},{"location":"#key-technologies","title":"Key Technologies","text":"Technology Purpose Configuration Kubernetes Container orchestration System definition Helm Package management Charts directory Traefik Ingress controller Traefik charts cert-manager Certificate automation cert-manager chart Prometheus Monitoring &amp; metrics Monitoring stack Grafana Observability dashboards Dashboard configs GitHub Actions CI/CD automation Workflow definitions Backstage Service catalog Entity definitions SOPS Secret encryption Secret management"},{"location":"#repository-structure","title":"Repository Structure","text":"<pre><code>organisation-public/\n\u251c\u2500\u2500 catalog/                    # Backstage entity definitions\n\u2502   \u251c\u2500\u2500 domains/               # Business domains\n\u2502   \u251c\u2500\u2500 systems/               # Technical systems  \n\u2502   \u251c\u2500\u2500 components/            # Service components\n\u2502   \u251c\u2500\u2500 groups/                # Team definitions\n\u2502   \u2514\u2500\u2500 resources/             # Infrastructure resources\n\u251c\u2500\u2500 ops/                       # Operations configuration\n\u2502   \u251c\u2500\u2500 helm/                  # Kubernetes Helm charts\n\u2502   \u2514\u2500\u2500 secrets/               # Encrypted secrets (SOPS)\n\u251c\u2500\u2500 docs/                      # Documentation\n\u2502   \u251c\u2500\u2500 techdocs/              # This documentation site\n\u2502   \u2514\u2500\u2500 adrs/                  # Architecture Decision Records\n\u251c\u2500\u2500 .github/workflows/         # CI/CD automation\n\u2514\u2500\u2500 grafana-dashboards/        # Monitoring dashboards\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to the platform? Start here:</p> <ol> <li>\ud83d\udccb Prerequisites - Required tools and access</li> <li>\ud83d\udd27 Platform Setup - Connect to the cluster</li> <li>\ud83d\ude80 First Deployment - Deploy your first application</li> <li>\ud83d\udcca Monitoring - Access dashboards and metrics</li> </ol>"},{"location":"#quick-commands","title":"Quick Commands","text":"<p>Essential commands for platform operations:</p> <pre><code># Connect to cluster\naws eks update-kubeconfig --name staging-eks-cluster --region eu-west-1\n\n# View platform status\nkubectl get pods -A\n\n# Access Grafana dashboards\nmake view-grafana\n\n# View Traefik dashboard  \nmake view-traefik\n\n# Decrypt secrets for development\nmake decrypt-secrets SECRETS_DIR=./ops/secrets/[component-name]\n</code></pre> <p>\ud83d\udca1 Pro Tip: All Makefile targets are documented in the Maintenance Tasks section.</p>"},{"location":"#support-contributing","title":"Support &amp; Contributing","text":"<ul> <li>\ud83d\udc1b Issues: Report bugs or request features</li> <li>\ud83d\udcac Questions: Contact the infrastructure team </li> <li>\ud83d\udcd6 ADRs: Review Architecture Decisions before major changes</li> <li>\ud83d\udd04 Updates: Follow the deployment procedures</li> </ul>"},{"location":"#architecture-decisions","title":"Architecture Decisions","text":"<p>Recent architectural decisions that shape this platform:</p> <ul> <li>View all Architecture Decision Records (ADRs)</li> <li>Understand our Security Model</li> <li>Review Operational Standards</li> </ul> <p>\ud83d\udcda Documentation Maintenance: This documentation is automatically generated and maintained. To update, see TechDocs maintenance guide.</p>"},{"location":"ia-proposal/","title":"Information Architecture Proposal","text":"<p>Based on analysis of the WebGrip Organisation Public Repository, I propose three alternative information architectures for our TechDocs site. This repository serves as the foundational infrastructure platform for the organization, focusing on Kubernetes operations, Backstage catalog management, and CI/CD automation.</p>"},{"location":"ia-proposal/#repository-analysis-summary","title":"Repository Analysis Summary","text":"<p>Repository Type: Infrastructure Operations + Platform Engineering + Organization Catalog Primary Users: Platform engineers, SREs, infrastructure teams, developers deploying to the platform Core Technologies: Kubernetes, Helm, Backstage, GitHub Actions, SOPS/Age, Grafana, Traefik</p> <p>Key Repository Seams Identified: - Organization: Backstage domains, systems, components, groups (catalog/) - Infrastructure: Kubernetes cluster components via Helm charts (ops/helm/) - Operations: CI/CD workflows, secret management, monitoring (workflows, ops/secrets) - Platform Services: Ingress, certificates, runners, observability - Governance: ADRs, security, compliance</p>"},{"location":"ia-proposal/#alternative-1-organization-first-architecture","title":"Alternative 1: Organization-First Architecture","text":"<p>Rationale: Start with Backstage organizational structure, then drill into technical implementation. This approach mirrors how teams think about ownership and responsibilities.</p> <p>Navigation Structure: <pre><code>\u251c\u2500\u2500 Overview\n\u251c\u2500\u2500 Organization\n\u2502   \u251c\u2500\u2500 Domains &amp; Systems\n\u2502   \u251c\u2500\u2500 Components &amp; Services  \n\u2502   \u251c\u2500\u2500 Teams &amp; Ownership\n\u2502   \u2514\u2500\u2500 Resource Catalog\n\u251c\u2500\u2500 Platform Infrastructure\n\u2502   \u251c\u2500\u2500 Kubernetes Architecture\n\u2502   \u251c\u2500\u2500 Core Services\n\u2502   \u251c\u2500\u2500 Networking &amp; Ingress\n\u2502   \u2514\u2500\u2500 Monitoring Stack\n\u251c\u2500\u2500 Operations &amp; Workflows\n\u2502   \u251c\u2500\u2500 CI/CD Pipelines\n\u2502   \u251c\u2500\u2500 Secret Management\n\u2502   \u251c\u2500\u2500 Application Lifecycle\n\u2502   \u2514\u2500\u2500 Platform Maintenance\n\u251c\u2500\u2500 Developer Experience\n\u2502   \u251c\u2500\u2500 Getting Started\n\u2502   \u251c\u2500\u2500 Deployment Patterns\n\u2502   \u251c\u2500\u2500 Troubleshooting\n\u2502   \u2514\u2500\u2500 Contributing\n\u2514\u2500\u2500 Governance\n    \u251c\u2500\u2500 Architecture Decisions (ADRs)\n    \u251c\u2500\u2500 Security &amp; Compliance\n    \u2514\u2500\u2500 Standards &amp; Conventions\n</code></pre></p> <p>Feeds from Repository: - Organization \u2192 <code>catalog/</code> (domains, systems, components, groups) - Platform Infrastructure \u2192 <code>ops/helm/</code> (all charts), <code>grafana-dashboards/</code> - Operations \u2192 <code>.github/workflows/</code>, <code>ops/secrets/</code>, <code>Makefile</code> - Developer Experience \u2192 <code>README.md</code>, workflow templates - Governance \u2192 <code>docs/adrs/</code>, security annotations</p> <p>Strengths: Clear ownership boundaries, mirrors Backstage structure, good for organizational alignment Weaknesses: Technical details scattered across organizational boundaries</p>"},{"location":"ia-proposal/#alternative-2-infrastructure-first-architecture","title":"Alternative 2: Infrastructure-First Architecture","text":"<p>Rationale: Start with Kubernetes cluster architecture and technical systems, then layer organizational context. Best for platform engineers who think in technical layers.</p> <p>Navigation Structure: <pre><code>\u251c\u2500\u2500 Overview\n\u251c\u2500\u2500 Cluster Architecture\n\u2502   \u251c\u2500\u2500 Infrastructure Overview\n\u2502   \u251c\u2500\u2500 Network Architecture\n\u2502   \u251c\u2500\u2500 Security Model\n\u2502   \u2514\u2500\u2500 Resource Management\n\u251c\u2500\u2500 Platform Components\n\u2502   \u251c\u2500\u2500 Ingress &amp; Load Balancing\n\u2502   \u251c\u2500\u2500 Certificate Management\n\u2502   \u251c\u2500\u2500 Monitoring &amp; Observability\n\u2502   \u251c\u2500\u2500 CI/CD Infrastructure\n\u2502   \u2514\u2500\u2500 Secret Management\n\u251c\u2500\u2500 Service Catalog\n\u2502   \u251c\u2500\u2500 Backstage Integration\n\u2502   \u251c\u2500\u2500 Domains &amp; Systems\n\u2502   \u251c\u2500\u2500 Component Registry\n\u2502   \u2514\u2500\u2500 API Contracts\n\u251c\u2500\u2500 Operations Runbooks\n\u2502   \u251c\u2500\u2500 Deployment Procedures\n\u2502   \u251c\u2500\u2500 Monitoring &amp; Alerting\n\u2502   \u251c\u2500\u2500 Incident Response\n\u2502   \u251c\u2500\u2500 Backup &amp; Recovery\n\u2502   \u2514\u2500\u2500 Maintenance Tasks\n\u251c\u2500\u2500 Developer Workflows\n\u2502   \u251c\u2500\u2500 Onboarding Guide\n\u2502   \u251c\u2500\u2500 Application Templates\n\u2502   \u251c\u2500\u2500 CI/CD Patterns\n\u2502   \u2514\u2500\u2500 Local Development\n\u2514\u2500\u2500 Governance &amp; Standards\n    \u251c\u2500\u2500 Architecture Decisions (ADRs)\n    \u251c\u2500\u2500 Security Policies\n    \u2514\u2500\u2500 Operational Standards\n</code></pre></p> <p>Feeds from Repository: - Cluster Architecture \u2192 <code>ops/helm/</code> (infrastructure charts), <code>catalog/systems/</code> - Platform Components \u2192 <code>ops/helm/</code> (by component type), <code>grafana-dashboards/</code> - Service Catalog \u2192 <code>catalog/</code> (all entities) - Operations \u2192 <code>Makefile</code>, <code>.github/workflows/</code>, <code>ops/secrets/</code> - Developer Workflows \u2192 workflow templates, <code>README.md</code> - Governance \u2192 <code>docs/adrs/</code>, security configs</p> <p>Strengths: Technical clarity, matches operational mindset, clear service boundaries Weaknesses: Organizational context less prominent, steeper learning curve for non-platform engineers</p>"},{"location":"ia-proposal/#alternative-3-workflow-first-architecture","title":"Alternative 3: Workflow-First Architecture","text":"<p>Rationale: Organize around common user workflows and tasks. Task-oriented approach that matches how people actually use the platform.</p> <p>Navigation Structure: <pre><code>\u251c\u2500\u2500 Overview\n\u251c\u2500\u2500 Getting Started\n\u2502   \u251c\u2500\u2500 Platform Overview\n\u2502   \u251c\u2500\u2500 Access &amp; Prerequisites\n\u2502   \u251c\u2500\u2500 First Deployment\n\u2502   \u2514\u2500\u2500 Key Concepts\n\u251c\u2500\u2500 Application Lifecycle\n\u2502   \u251c\u2500\u2500 Creating New Applications\n\u2502   \u251c\u2500\u2500 Deployment Patterns\n\u2502   \u251c\u2500\u2500 Configuration Management\n\u2502   \u251c\u2500\u2500 Monitoring &amp; Observability\n\u2502   \u2514\u2500\u2500 Troubleshooting\n\u251c\u2500\u2500 Platform Management\n\u2502   \u251c\u2500\u2500 Infrastructure Components\n\u2502   \u251c\u2500\u2500 Service Maintenance\n\u2502   \u251c\u2500\u2500 Scaling &amp; Capacity\n\u2502   \u251c\u2500\u2500 Security Operations\n\u2502   \u2514\u2500\u2500 Disaster Recovery\n\u251c\u2500\u2500 Organization &amp; Catalog\n\u2502   \u251c\u2500\u2500 Service Discovery\n\u2502   \u251c\u2500\u2500 Team Structure\n\u2502   \u251c\u2500\u2500 Component Ownership\n\u2502   \u2514\u2500\u2500 API Documentation\n\u251c\u2500\u2500 Advanced Topics\n\u2502   \u251c\u2500\u2500 Custom Components\n\u2502   \u251c\u2500\u2500 CI/CD Customization\n\u2502   \u251c\u2500\u2500 Integration Patterns\n\u2502   \u2514\u2500\u2500 Performance Optimization\n\u2514\u2500\u2500 Reference\n    \u251c\u2500\u2500 Architecture Decisions (ADRs)\n    \u251c\u2500\u2500 API References\n    \u251c\u2500\u2500 Configuration Schemas\n    \u2514\u2500\u2500 Troubleshooting Index\n</code></pre></p> <p>Feeds from Repository: - Getting Started \u2192 <code>README.md</code>, requirements, basic workflows - Application Lifecycle \u2192 <code>.github/workflows/</code>, templates, <code>ops/helm/950-example-services/</code> - Platform Management \u2192 <code>ops/helm/</code> (core infrastructure), <code>Makefile</code>, monitoring - Organization &amp; Catalog \u2192 <code>catalog/</code> (all entities) - Advanced Topics \u2192 Complex helm charts, custom workflows - Reference \u2192 <code>docs/adrs/</code>, schemas, troubleshooting guides</p> <p>Strengths: User-centric, task-oriented, excellent for onboarding, practical focus Weaknesses: Potential duplication across workflows, harder to maintain technical coherence</p>"},{"location":"ia-proposal/#recommendation-infrastructure-first-architecture","title":"Recommendation: Infrastructure-First Architecture","text":"<p>Selected: Alternative 2: Infrastructure-First Architecture</p> <p>Justification for this Repository:</p> <ol> <li>Primary Audience: Platform engineers and SREs who think in technical layers and system boundaries</li> <li>Repository Purpose: This is an infrastructure operations repository, not an application development repository</li> <li>Technical Coherence: The Helm chart organization (by functional area) maps well to the infrastructure-first approach</li> <li>Operational Clarity: Platform components are the primary abstraction layer that users interact with</li> <li>Scalability: As the platform grows, new infrastructure components can be easily slotted into existing categories</li> <li>Troubleshooting: When things break, operators think in terms of \"which component failed\" rather than \"which workflow failed\"</li> </ol> <p>Key Benefits for WebGrip: - Clear Technical Boundaries: Each major platform component gets dedicated documentation space - Operational Focus: Aligns with how platform teams operate and maintain systems - Backstage Integration: Service catalog section provides organizational context without losing technical focus - Ownership Model: Technical component ownership maps to team responsibilities - Growth Pattern: New platform capabilities can be easily added to existing technical categories</p> <p>Tradeoffs Accepted: - Steeper Learning Curve: New developers may need more guidance to find workflow-specific information - Organizational Context: Team/domain information is less prominent but still accessible via Service Catalog section</p> <p>Validation Approach: The infrastructure-first approach aligns with the repository's Helm chart organization pattern and the technical focus of the existing Backstage catalog entities. This IA will provide clear technical documentation while maintaining links to organizational structure through the Service Catalog section.</p>"},{"location":"ia-proposal/#next-steps","title":"Next Steps","text":"<ol> <li>Generate <code>mkdocs.yml</code> navigation based on the Infrastructure-First architecture</li> <li>Map specific repository locations to each documentation section</li> <li>Begin content creation starting with Cluster Architecture and Platform Components</li> <li>Ensure cross-references between technical components and organizational entities (Backstage catalog)</li> </ol>"},{"location":"overview/","title":"Platform Overview","text":"<p>The WebGrip Organisation Public Platform is a comprehensive Kubernetes-based infrastructure platform that provides the foundation for application development, deployment, and operations across the WebGrip organization.</p>"},{"location":"overview/#platform-purpose","title":"Platform Purpose","text":"<p>This platform serves as the organizational backbone for:</p> <ul> <li>Development Teams: Providing self-service application deployment and management</li> <li>Infrastructure Teams: Centralizing platform operations and maintenance  </li> <li>Security Teams: Enforcing security policies and compliance requirements</li> <li>Operations Teams: Monitoring, alerting, and incident response capabilities</li> </ul>"},{"location":"overview/#platform-architecture","title":"Platform Architecture","text":""},{"location":"overview/#high-level-architecture","title":"High-Level Architecture","text":""},{"location":"overview/#platform-layers","title":"Platform Layers","text":"Layer Components Purpose Ingress Traefik, cert-manager External traffic routing, TLS termination Application User applications, Platform services Business logic and platform capabilities Platform Monitoring, Logging, Storage Cross-cutting platform services Infrastructure Kubernetes nodes, Networking, Security Foundation compute and network"},{"location":"overview/#core-capabilities","title":"Core Capabilities","text":""},{"location":"overview/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Repository Location: <code>ops/helm/</code></p> <p>All infrastructure is defined as code using Helm charts, providing:</p> <ul> <li>Reproducible Deployments: Consistent environments across development, staging, and production</li> <li>Version Control: All infrastructure changes tracked in Git</li> <li>Rollback Capability: Easy rollback to previous working configurations</li> <li>Documentation: Self-documenting infrastructure through code</li> </ul> <p>Key Infrastructure Components: - Cluster Monitoring: <code>ops/helm/007-cluster-monitoring/</code> - Certificate Management: <code>ops/helm/010-cert-manager/</code> - Ingress Controllers: <code>ops/helm/030-ingress-controllers/</code> - CI/CD Infrastructure: <code>ops/helm/040-gha-runners-controller/</code></p>"},{"location":"overview/#service-discovery-catalog","title":"Service Discovery &amp; Catalog","text":"<p>Repository Location: <code>catalog/</code></p> <p>Backstage-powered service catalog providing:</p> <ul> <li>Domain Organization: Business domain boundaries and ownership</li> <li>System Mapping: Technical system relationships and dependencies  </li> <li>Component Registry: Service inventory with metadata and documentation</li> <li>API Documentation: Centralized API discovery and specifications</li> </ul>"},{"location":"overview/#cicd-automation","title":"CI/CD Automation","text":"<p>Repository Location: <code>.github/workflows/</code></p> <p>GitHub Actions-based automation providing:</p> <ul> <li>Application Lifecycle: Automated repo creation and bootstrapping</li> <li>Deployment Automation: Standardized deployment procedures</li> <li>Documentation Publishing: Automatic TechDocs updates</li> <li>Security Scanning: Integrated security and compliance checks</li> </ul>"},{"location":"overview/#secret-management","title":"Secret Management","text":"<p>Repository Location: <code>ops/secrets/</code></p> <p>SOPS and Age-based secret management providing:</p> <ul> <li>Encrypted at Rest: All secrets encrypted in repository</li> <li>Fine-grained Access: Role-based access to secret categories  </li> <li>Audit Trail: All secret changes tracked in Git history</li> <li>Rotation Support: Structured approach to secret rotation</li> </ul>"},{"location":"overview/#observability","title":"Observability","text":"<p>Repository Location: <code>grafana-dashboards/</code></p> <p>Comprehensive monitoring and observability:</p> <ul> <li>Metrics Collection: Prometheus-based metrics</li> <li>Dashboard Visualization: Pre-built Grafana dashboards  </li> <li>Alerting: Proactive monitoring and incident response</li> <li>Log Aggregation: Centralized application and platform logs</li> </ul>"},{"location":"overview/#platform-benefits","title":"Platform Benefits","text":""},{"location":"overview/#for-developers","title":"For Developers","text":"<ul> <li>\ud83d\ude80 Fast Time-to-Market: Standardized templates and deployment pipelines</li> <li>\ud83d\udcca Built-in Observability: Monitoring and alerting included by default</li> <li>\ud83d\udd10 Security by Default: Security policies and secret management built-in</li> <li>\ud83d\udcda Self-Service Documentation: Complete platform documentation and runbooks</li> </ul>"},{"location":"overview/#for-operations","title":"For Operations","text":"<ul> <li>\u2699\ufe0f Standardized Operations: Consistent deployment and management procedures</li> <li>\ud83d\udd0d Full Visibility: Comprehensive monitoring across all platform components</li> <li>\ud83d\udee1\ufe0f Security Compliance: Built-in security scanning and policy enforcement</li> <li>\ud83d\udcc8 Scalability: Auto-scaling and resource management capabilities</li> </ul>"},{"location":"overview/#for-organization","title":"For Organization","text":"<ul> <li>\ud83d\udcb0 Cost Efficiency: Shared infrastructure and standardized tooling</li> <li>\u26a1 Developer Productivity: Reduced operational overhead for development teams</li> <li>\ud83c\udfaf Consistency: Standardized approaches across all projects and teams</li> <li>\ud83d\udccb Governance: Clear ownership, documentation, and decision tracking</li> </ul>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>Ready to start using the platform? Choose your path:</p> <ul> <li>\ud83d\udc68\u200d\ud83d\udcbb I'm a Developer<p>Start with the Onboarding Guide to set up your local environment and deploy your first application.</p> </li> </ul> <ul> <li>\u2699\ufe0f I'm a Platform Engineer<p>Review the Cluster Architecture and Platform Components to understand the technical implementation.</p> </li> </ul> <ul> <li>\ud83d\udccb I'm a Product Manager<p>Explore the Service Catalog to understand the organizational structure and service ownership.</p> </li> </ul> <ul> <li>\ud83d\udee1\ufe0f I'm a Security Engineer<p>Review the Security Model and Security Policies to understand the platform's security posture.</p> </li> </ul>"},{"location":"overview/#platform-metrics","title":"Platform Metrics","text":"<p>Key platform health indicators:</p> Metric Current Status Target Platform Uptime 99.9% &gt;99.5% Application Deployment Time &lt;5 minutes &lt;10 minutes Mean Time to Recovery (MTTR) &lt;15 minutes &lt;30 minutes Developer Onboarding Time &lt;2 hours &lt;4 hours Security Scan Coverage 100% 100% <p>\ud83d\udcca Live Metrics: View real-time platform metrics in Grafana dashboards</p>"},{"location":"overview/#next-steps","title":"Next Steps","text":"<ol> <li>\ud83d\udccb Prerequisites - Ensure you have required tools and access</li> <li>\ud83c\udfd7\ufe0f Cluster Architecture - Understand the underlying infrastructure</li> <li>\ud83d\udd27 Platform Components - Learn about core platform services</li> <li>\ud83d\udcd6 Operations Runbooks - Master platform operations procedures</li> </ol> <p>\ud83d\udca1 Platform Evolution: This platform follows our Architecture Decision Records (ADRs). Proposed changes should include an ADR for significant architectural decisions.</p>"},{"location":"cluster-architecture/infrastructure-overview/","title":"Infrastructure Overview","text":"<p>The WebGrip platform is built on a Kubernetes-based infrastructure that provides a scalable, secure, and observable foundation for application development and deployment.</p>"},{"location":"cluster-architecture/infrastructure-overview/#infrastructure-philosophy","title":"Infrastructure Philosophy","text":"<p>Our infrastructure follows these core principles:</p> <ul> <li>\ud83c\udfd7\ufe0f Infrastructure as Code: All infrastructure defined in version-controlled Helm charts</li> <li>\ud83d\udd12 Security by Default: Security controls built into every layer of the stack</li> <li>\ud83d\udcca Observable by Design: Comprehensive monitoring and logging across all components</li> <li>\u26a1 Self-Service: Developers can deploy and manage applications independently</li> <li>\ud83d\udd04 GitOps: All changes flow through Git workflows with proper review and automation</li> </ul>"},{"location":"cluster-architecture/infrastructure-overview/#platform-stack","title":"Platform Stack","text":""},{"location":"cluster-architecture/infrastructure-overview/#container-orchestration","title":"Container Orchestration","text":"<p>Technology: Kubernetes Configuration: <code>catalog/systems/kubernetes.yaml</code></p> <p>Kubernetes provides the foundation for container orchestration, offering:</p> <ul> <li>Pod Management: Automated deployment, scaling, and health management</li> <li>Service Discovery: Built-in DNS and service mesh capabilities</li> <li>Resource Management: CPU, memory, and storage allocation and limits</li> <li>Security Isolation: Namespace-based multi-tenancy and network policies</li> </ul> <p></p>"},{"location":"cluster-architecture/infrastructure-overview/#package-management","title":"Package Management","text":"<p>Technology: Helm Configuration: <code>ops/helm/</code></p> <p>Helm manages Kubernetes application deployments through templated charts:</p> Chart Category Purpose Location 005-tainters Node tainting and tolerations <code>ops/helm/005-tainters/</code> 007-cluster-monitoring Platform monitoring stack <code>ops/helm/007-cluster-monitoring/</code> 010-cert-manager Certificate automation <code>ops/helm/010-cert-manager/</code> 020-cluster-issuers Certificate issuers <code>ops/helm/020-cluster-issuers/</code> 030-ingress-controllers Ingress and load balancing <code>ops/helm/030-ingress-controllers/</code> 040-gha-runners-controller CI/CD infrastructure <code>ops/helm/040-gha-runners-controller/</code> 045-gha-runners Self-hosted runner instances <code>ops/helm/045-gha-runners/</code> 060-grafana-stack Observability dashboards <code>ops/helm/060-grafana-stack/</code> 950-example-services Sample applications <code>ops/helm/950-example-services/</code> <p>\ud83d\udccb Chart Naming Convention: Charts are numbered to indicate deployment order and dependencies. Lower numbers deploy first.</p>"},{"location":"cluster-architecture/infrastructure-overview/#cloud-infrastructure","title":"Cloud Infrastructure","text":"<p>Provider: AWS (Amazon Web Services) Cluster: DigitalOcean Kubernetes (DOKS) Configuration: <code>catalog/resources/staging-doks-cluster.yaml</code></p> <p>The platform currently runs on a DigitalOcean Kubernetes cluster with AWS integrations for:</p> <ul> <li>Identity &amp; Access: AWS IAM integration for access control</li> <li>Container Registry: AWS ECR for container image storage  </li> <li>Backup &amp; Recovery: AWS S3 for persistent volume backups</li> <li>External Services: AWS services for extended platform capabilities</li> </ul>"},{"location":"cluster-architecture/infrastructure-overview/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"cluster-architecture/infrastructure-overview/#core-platform-services","title":"Core Platform Services","text":""},{"location":"cluster-architecture/infrastructure-overview/#component-details","title":"Component Details","text":"Component Type Purpose Configuration Traefik Ingress Controller Load balancing and traffic routing <code>ops/helm/030-ingress-controllers/ingress-traefik/</code> cert-manager Certificate Automation TLS certificate provisioning <code>ops/helm/010-cert-manager/</code> kube-prometheus-stack Monitoring Metrics collection and alerting <code>ops/helm/007-cluster-monitoring/kube-prometheus-stack/</code> Grafana Observability Dashboard visualization <code>ops/helm/060-grafana-stack/</code> GitHub Actions Runners CI/CD Self-hosted CI/CD execution <code>ops/helm/040-gha-runners-controller/</code>"},{"location":"cluster-architecture/infrastructure-overview/#infrastructure-automation","title":"Infrastructure Automation","text":""},{"location":"cluster-architecture/infrastructure-overview/#gitops-workflow","title":"GitOps Workflow","text":"<p>All infrastructure changes follow a GitOps workflow:</p> <p></p>"},{"location":"cluster-architecture/infrastructure-overview/#deployment-automation","title":"Deployment Automation","text":"<p>Workflow: <code>.github/workflows/on_source_change.yml</code></p> <p>Infrastructure deployments are automated through GitHub Actions:</p> <ol> <li>Validation: Helm chart linting and security scanning</li> <li>Staging: Deploy to staging environment for validation</li> <li>Production: Deploy to production with manual approval gates</li> <li>Verification: Automated health checks and rollback on failure</li> </ol>"},{"location":"cluster-architecture/infrastructure-overview/#secret-management","title":"Secret Management","text":"<p>Technology: SOPS + Age Configuration: <code>ops/secrets/</code></p> <p>Secrets are encrypted at rest and managed through:</p> <ul> <li>Encryption: Age-based encryption with public key distribution</li> <li>Access Control: Role-based access to decrypt specific secret categories</li> <li>Audit Trail: All secret changes tracked in Git history</li> <li>Rotation: Structured processes for secret rotation and distribution</li> </ul> <p>Secret Categories: - 007-kube-prometheus-stack-secrets: Monitoring credentials - 010-cert-manager-secrets: Certificate authority credentials - 030-ingress-controllers: Ingress configuration secrets - 045-gha-runners-secrets: CI/CD runner credentials - 060-grafana-stack: Dashboard and alerting credentials</p>"},{"location":"cluster-architecture/infrastructure-overview/#infrastructure-requirements","title":"Infrastructure Requirements","text":""},{"location":"cluster-architecture/infrastructure-overview/#prerequisites","title":"Prerequisites","text":"<p>To work with this infrastructure, you need:</p> <pre><code># Required tools (from README.md)\nbrew install awscli kubectl helm terraform age sops kubectx derailed/k9s/k9s\n</code></pre> <p>Access Requirements: - AWS CLI configured with appropriate permissions - kubectl access to the staging cluster - Age key for secret decryption (for authorized personnel) - GitHub repository access for GitOps workflows</p>"},{"location":"cluster-architecture/infrastructure-overview/#local-development-setup","title":"Local Development Setup","text":"<pre><code># Configure AWS and cluster access\naws configure\naws eks update-kubeconfig --name staging-eks-cluster --region eu-west-1\n\n# Verify cluster connectivity\nkubectl get nodes\n\n# Access platform dashboards\nmake view-grafana    # Grafana dashboards\nmake view-traefik    # Traefik dashboard\n</code></pre> <p>\ud83d\udd27 Makefile Commands: All operational commands are documented in the <code>Makefile</code> with targets for common tasks.</p>"},{"location":"cluster-architecture/infrastructure-overview/#infrastructure-monitoring","title":"Infrastructure Monitoring","text":""},{"location":"cluster-architecture/infrastructure-overview/#health-indicators","title":"Health Indicators","text":"<p>The platform monitors key infrastructure health metrics:</p> Metric Source Dashboard Cluster Resource Usage kube-state-metrics Cluster Overview Pod Health &amp; Restarts kubelet Pod Status Dashboard Ingress Traffic &amp; Latency Traefik Ingress Dashboard Certificate Expiry cert-manager Certificate Dashboard CI/CD Runner Health GitHub Actions Controller CI/CD Dashboard"},{"location":"cluster-architecture/infrastructure-overview/#alerting","title":"Alerting","text":"<p>Critical infrastructure alerts are configured for:</p> <ul> <li>Cluster Resource Exhaustion: CPU, memory, and storage thresholds</li> <li>Component Health: Platform service availability and response times  </li> <li>Security Events: Certificate expiry, authentication failures</li> <li>Performance Degradation: Latency and error rate thresholds</li> </ul>"},{"location":"cluster-architecture/infrastructure-overview/#next-steps","title":"Next Steps","text":"<p>Dive deeper into specific infrastructure areas:</p> <ul> <li>\ud83c\udf10 Network Architecture<p>Understand pod networking, service discovery, and ingress configuration</p> </li> </ul> <ul> <li>\ud83d\udd12 Security Model<p>Review security controls, access management, and compliance</p> </li> </ul> <ul> <li>\ud83d\udcca Resource Management<p>Learn about resource allocation, scaling, and capacity planning</p> </li> </ul> <ul> <li>\ud83d\udd27 Platform Components<p>Explore individual platform services and their configurations</p> </li> </ul> <p>\ud83c\udfd7\ufe0f Infrastructure Evolution: Infrastructure changes follow our Architecture Decision Records (ADRs). Significant infrastructure modifications require an ADR and stakeholder review.</p>"},{"location":"cluster-architecture/network-architecture/","title":"Network Architecture","text":"<p>The WebGrip platform implements a multi-layered network architecture that provides secure, scalable, and observable connectivity for applications and platform services.</p>"},{"location":"cluster-architecture/network-architecture/#network-overview","title":"Network Overview","text":"<p>The platform network architecture follows Kubernetes networking principles with additional layers for ingress, service mesh capabilities, and security enforcement.</p> <p></p>"},{"location":"cluster-architecture/network-architecture/#network-layers","title":"Network Layers","text":""},{"location":"cluster-architecture/network-architecture/#1-external-network-layer","title":"1. External Network Layer","text":"<p>Purpose: Handles external traffic routing and global load balancing</p> <p>Components: - Internet Gateway: Public internet access point - DNS: Domain name resolution and traffic distribution - CDN: Content delivery network for static assets (if configured)</p> <p>Traffic Flow: <pre><code>External Users \u2192 DNS Resolution \u2192 Load Balancer \u2192 Ingress Controller\n</code></pre></p>"},{"location":"cluster-architecture/network-architecture/#2-ingress-layer","title":"2. Ingress Layer","text":"<p>Technology: Traefik Configuration: <code>ops/helm/030-ingress-controllers/ingress-traefik/</code></p> <p>The ingress layer provides:</p> <ul> <li>HTTP/HTTPS Termination: TLS certificate management and SSL termination</li> <li>Request Routing: Path and host-based routing to backend services</li> <li>Load Balancing: Traffic distribution across healthy service instances</li> <li>Middleware: Authentication, rate limiting, and traffic modification</li> </ul> <p>Traefik Configuration:</p> <p></p> <p>Key Features: - Automatic Service Discovery: Kubernetes provider for dynamic configuration - Certificate Automation: Integration with cert-manager - Observability: Built-in metrics and tracing capabilities - Custom Middleware: <code>ops/helm/030-ingress-controllers/ingress-traefik-custom-middlewares/</code></p>"},{"location":"cluster-architecture/network-architecture/#3-pod-network-cni","title":"3. Pod Network (CNI)","text":"<p>Technology: Kubernetes Container Network Interface (CNI) Implementation: Cloud provider managed (DigitalOcean)</p> <p>Pod networking provides:</p> <ul> <li>Pod-to-Pod Communication: Direct IP connectivity between pods across nodes</li> <li>IP Address Management: Automatic IP allocation from cluster CIDR</li> <li>Network Isolation: Namespace-based network segmentation</li> <li>Network Policies: Fine-grained traffic control rules</li> </ul> <p>Pod Communication Patterns:</p> <p></p> <p>Network Address Ranges: | Network Type | CIDR Range | Purpose | |-------------|------------|---------| | Cluster CIDR | <code>10.244.0.0/16</code> | Pod IP addresses | | Service CIDR | <code>10.96.0.0/12</code> | Service virtual IPs | | Node CIDR | <code>10.0.0.0/16</code> | Node infrastructure IPs |</p> <p>Assumption: CIDR ranges are typical Kubernetes defaults. Actual ranges should be verified in cluster configuration with <code>kubectl cluster-info dump | grep -i cidr</code> or by checking cluster provider settings.</p> <p>\ud83d\udcdd Assumption: CIDR ranges are typical defaults. Actual ranges should be verified in cluster configuration.</p>"},{"location":"cluster-architecture/network-architecture/#4-service-network","title":"4. Service Network","text":"<p>Technology: Kubernetes Services Types: ClusterIP, NodePort, LoadBalancer, ExternalName</p> <p>Service networking provides:</p> <ul> <li>Service Discovery: DNS-based service name resolution</li> <li>Load Balancing: Traffic distribution across healthy endpoints</li> <li>Session Affinity: Sticky sessions when required</li> <li>Health Checking: Endpoint health monitoring and removal</li> </ul> <p>Service Types in Platform:</p> <p></p> <p>Service Discovery Example: <pre><code># DNS resolution within cluster\ncurl http://grafana.grafana-stack.svc.cluster.local:80\n\n# Short name resolution (same namespace)\ncurl http://grafana:80\n\n# Cross-namespace resolution  \ncurl http://traefik.ingress-traefik.svc.cluster.local:80\n</code></pre></p>"},{"location":"cluster-architecture/network-architecture/#network-security","title":"Network Security","text":""},{"location":"cluster-architecture/network-architecture/#network-policies","title":"Network Policies","text":"<p>Purpose: Implement microsegmentation and zero-trust networking</p> <p>Default Policy: Deny all traffic, allow specific flows</p> <p>Example Network Policy Structure: <pre><code># Allow ingress traffic to web tier from ingress controller\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: web-tier-ingress\nspec:\n  podSelector:\n    matchLabels:\n      tier: web\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-traefik\n    ports:\n    - protocol: TCP\n      port: 8080\n</code></pre></p> <p>Network Policy Categories: - Ingress Policies: Control incoming traffic to pods - Egress Policies: Control outgoing traffic from pods - Namespace Isolation: Restrict cross-namespace communication - Platform Service Access: Allow access to monitoring and logging</p>"},{"location":"cluster-architecture/network-architecture/#tls-and-certificate-management","title":"TLS and Certificate Management","text":"<p>Technology: cert-manager Configuration: <code>ops/helm/010-cert-manager/</code></p> <p>Certificate management provides:</p> <ul> <li>Automatic Certificate Provisioning: Let's Encrypt integration</li> <li>Certificate Rotation: Automatic renewal before expiry</li> <li>Wildcard Certificates: Domain and subdomain coverage</li> <li>Certificate Distribution: Automatic distribution to ingress controllers</li> </ul> <p>Certificate Issuers: - Cluster Issuers: <code>ops/helm/020-cluster-issuers/certificate-cluster-issuer-traefik/</code> - Let's Encrypt Production: For production workloads - Let's Encrypt Staging: For testing and validation</p>"},{"location":"cluster-architecture/network-architecture/#service-mesh-capabilities","title":"Service Mesh Capabilities","text":"<p>While not implementing a full service mesh, the platform provides service mesh-like capabilities through:</p>"},{"location":"cluster-architecture/network-architecture/#traffic-management","title":"Traffic Management","text":"<p>Traefik Middleware: <code>ops/helm/030-ingress-controllers/ingress-traefik-custom-middlewares/</code></p> <ul> <li>Request Routing: Path and header-based routing</li> <li>Traffic Splitting: A/B testing and canary deployments</li> <li>Circuit Breaking: Automatic failure handling</li> <li>Rate Limiting: Request throttling and DDoS protection</li> </ul>"},{"location":"cluster-architecture/network-architecture/#observability","title":"Observability","text":"<p>Integration Points: - Metrics: Prometheus metrics from network components - Tracing: Distributed tracing headers and propagation - Logging: Access logs and audit trails - Health Checks: Endpoint health monitoring</p> <p></p>"},{"location":"cluster-architecture/network-architecture/#network-monitoring","title":"Network Monitoring","text":""},{"location":"cluster-architecture/network-architecture/#monitoring-components","title":"Monitoring Components","text":"<p>Traffic Monitoring: - Ingress Metrics: Request rates, response times, error rates - Service Metrics: Endpoint health, connection counts - Pod Network Metrics: Bandwidth utilization, packet loss - DNS Metrics: Resolution times, failure rates</p> <p>Key Metrics Collected: | Metric Category | Examples | Dashboard | |----------------|----------|-----------| | Ingress Traffic | Request rate, latency, error rate | Traefik Dashboard | | Service Health | Endpoint availability, response time | Service Dashboard | | Network Performance | Bandwidth, packet loss, connection counts | Network Dashboard | | Security Events | Failed connections, certificate issues | Security Dashboard |</p>"},{"location":"cluster-architecture/network-architecture/#network-troubleshooting","title":"Network Troubleshooting","text":"<p>Common Tools and Commands:</p> <pre><code># Check service endpoints\nkubectl get endpoints -A\n\n# Test service connectivity\nkubectl run -it --rm debug --image=busybox --restart=Never -- sh\n# Inside pod: nslookup service-name\n\n# Check network policies\nkubectl get networkpolicies -A\n\n# View ingress status\nkubectl get ingress -A\n\n# Check certificate status\nkubectl get certificates -A\n</code></pre> <p>Troubleshooting Workflows: 1. Service Discovery Issues: Check DNS resolution and service endpoints 2. Connectivity Problems: Verify network policies and security groups 3. Certificate Issues: Check cert-manager logs and certificate status 4. Performance Issues: Review traffic patterns and resource utilization</p>"},{"location":"cluster-architecture/network-architecture/#network-access-patterns","title":"Network Access Patterns","text":""},{"location":"cluster-architecture/network-architecture/#application-access-patterns","title":"Application Access Patterns","text":""},{"location":"cluster-architecture/network-architecture/#administrative-access","title":"Administrative Access","text":"<p>Management Interfaces: - Kubernetes API: <code>kubectl</code> and dashboard access - Grafana: <code>make view-grafana</code> - Monitoring dashboards - Traefik Dashboard: <code>make view-traefik</code> - Ingress status - Prometheus: Direct metrics access for troubleshooting</p> <p>Access Control: - RBAC: Role-based access control for cluster resources - Network Policies: Restrict administrative interface access - VPN/Bastion: Secure access for administrative operations</p>"},{"location":"cluster-architecture/network-architecture/#performance-optimization","title":"Performance Optimization","text":""},{"location":"cluster-architecture/network-architecture/#network-performance-tuning","title":"Network Performance Tuning","text":"<p>Optimization Strategies: - Connection Pooling: Reuse connections for backend services - HTTP/2: Enable HTTP/2 for improved multiplexing - Compression: Gzip/Brotli compression for responses - Caching: Edge caching and CDN integration</p> <p>Resource Limits: <pre><code># Example resource limits for network components\nresources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"512Mi\" \n    cpu: \"500m\"\n</code></pre></p>"},{"location":"cluster-architecture/network-architecture/#capacity-planning","title":"Capacity Planning","text":"<p>Network Capacity Metrics: - Bandwidth Utilization: Monitor node and pod network usage - Connection Limits: Track concurrent connections per service - Latency Targets: Maintain acceptable response times - Throughput Requirements: Plan for peak traffic scenarios</p>"},{"location":"cluster-architecture/network-architecture/#next-steps","title":"Next Steps","text":"<p>Explore related network and infrastructure topics:</p> <ul> <li>\ud83d\udd12 Security Model<p>Understand security controls, access management, and network security policies</p> </li> </ul> <ul> <li>\ud83d\udcca Resource Management<p>Learn about resource allocation, scaling, and capacity planning</p> </li> </ul> <ul> <li>\ud83d\udd27 Ingress &amp; Load Balancing<p>Deep dive into Traefik configuration and traffic management</p> </li> </ul> <ul> <li>\ud83d\udcc8 Monitoring &amp; Observability<p>Explore network monitoring, metrics, and troubleshooting tools</p> </li> </ul> <p>\ud83c\udf10 Network Evolution: Network architecture changes should be documented in Architecture Decision Records (ADRs) due to their impact on security and performance.</p>"},{"location":"cluster-architecture/security-model/","title":"Macro Rendering Error","text":"<p>File: <code>cluster-architecture/security-model.md</code></p> <p>UndefinedError: 'github' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/usr/local/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 431, in top-level template code\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'github' is undefined\n</code></pre>"},{"location":"developer-workflows/onboarding-guide/","title":"Macro Rendering Error","text":"<p>File: <code>developer-workflows/onboarding-guide.md</code></p> <p>UndefinedError: 'github' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/usr/local/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 375, in top-level template code\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'github' is undefined\n</code></pre>"},{"location":"governance-standards/architecture-decisions/","title":"Architecture Decisions (ADRs)","text":"<p>This page provides access to all Architecture Decision Records (ADRs) for the WebGrip platform, documenting significant architectural choices, their rationale, and evolution over time.</p>"},{"location":"governance-standards/architecture-decisions/#what-are-adrs","title":"What are ADRs?","text":"<p>Architecture Decision Records (ADRs) document important architectural decisions made during the development and evolution of the platform. They capture:</p> <ul> <li>Context: The situation that led to the decision</li> <li>Decision: What was decided and why</li> <li>Consequences: The positive and negative impacts of the decision</li> <li>Status: Whether the decision is proposed, accepted, rejected, or superseded</li> </ul>"},{"location":"governance-standards/architecture-decisions/#adr-repository","title":"ADR Repository","text":"<p>Location: <code>docs/adrs/</code> Format: MADR (Markdown Architecture Decision Records) Template: <code>docs/adrs/0000-template.md</code></p>"},{"location":"governance-standards/architecture-decisions/#adr-template-structure","title":"ADR Template Structure","text":"<p>Our ADRs follow the MADR v3+ format with WebGrip-specific enhancements:</p> <pre><code># ADR NN \u2013 Concise Title\n\n* **Status**: Proposed \u2502 Accepted \u2502 Rejected \u2502 Deprecated \u2502 Superseded by ADR\u2011NN\n* **Deciders**: Names of people who give formal approval\n* **Date**: YYYY\u2011MM\u2011DD\n* **Tags**: Domain::Subdomain, Security, Performance, etc.\n* **Version**: 1.0.0\n\n## Context and Problem Statement\n[Background, constraints, and core problem]\n\n## Decision Drivers\n[Why this matters - performance targets, compliance requirements, etc.]\n\n## Considered Options\n1. Option A \u2013 summary\n2. Option B \u2013 summary  \n3. Option C \u2013 summary\n\n## Decision Outcome\n### Chosen Option\n[Selected option]\n\n### Rationale\n[Why this option was superior]\n\n### Positive Consequences\n* [Benefits]\n\n### Negative Consequences / Trade\u2011offs\n* [Costs and limitations]\n\n### Risks &amp; Mitigations\n* [Identified risks and mitigation strategies]\n\n## Validation\n* **Immediate proof** \u2013 links to tests, PoCs, benchmarks\n* **Ongoing guardrails** \u2013 monitoring, alerts, KPIs\n\n## Compliance, Security &amp; Privacy Impact\n[Data classification, threat model updates, regulatory compliance]\n\n## Notes\n* **Related Decisions**: ADR\u2011NN, ADR\u2011MM\n* **Supersedes / Amends**: ADR\u2011KK if any\n* **Follow\u2011ups / TODOs**: JIRA\u2011123, etc.\n\n### Revision Log\n| Version | Date | Author | Change |\n|---------|------|--------|--------|\n| 1.0.0   | YYYY\u2011MM\u2011DD | Name | Initial creation |\n</code></pre>"},{"location":"governance-standards/architecture-decisions/#current-adrs","title":"Current ADRs","text":""},{"location":"governance-standards/architecture-decisions/#adr-index","title":"ADR Index","text":"<p>\ud83d\udcdd Note: As of the current repository state, only the ADR template exists. This section will be populated as architectural decisions are documented.</p> ADR Title Status Date Tags 0000 ADR Template Template - Documentation Future ADRs will be listed here as they are created"},{"location":"governance-standards/architecture-decisions/#adr-categories","title":"ADR Categories","text":"<p>As the platform evolves, ADRs should be categorized by domain:</p>"},{"location":"governance-standards/architecture-decisions/#infrastructure-decisions","title":"Infrastructure Decisions","text":"<ul> <li>Kubernetes Platform Choices: Why DOKS over other providers</li> <li>Container Runtime: OCI runtime selection and configuration</li> <li>Network Architecture: CNI selection and network policies</li> <li>Storage Solutions: Persistent volume and backup strategies</li> </ul>"},{"location":"governance-standards/architecture-decisions/#security-decisions","title":"Security Decisions","text":"<ul> <li>Secret Management: SOPS + Age vs. other secret solutions</li> <li>Access Control: RBAC configuration and authorization patterns</li> <li>Certificate Management: cert-manager vs. manual certificate handling</li> <li>Network Security: Network policies and security boundaries</li> </ul>"},{"location":"governance-standards/architecture-decisions/#observability-decisions","title":"Observability Decisions","text":"<ul> <li>Monitoring Stack: Prometheus + Grafana selection rationale</li> <li>Logging Strategy: Log aggregation and retention policies</li> <li>Alerting Policies: Alert fatigue prevention and escalation</li> <li>Metrics Collection: Which metrics to collect and store</li> </ul>"},{"location":"governance-standards/architecture-decisions/#development-experience-decisions","title":"Development Experience Decisions","text":"<ul> <li>CI/CD Platform: GitHub Actions vs. other CI/CD solutions</li> <li>Application Templates: Standardized application bootstrapping</li> <li>Documentation Platform: Backstage TechDocs selection</li> <li>Development Workflows: Git workflows and review processes</li> </ul>"},{"location":"governance-standards/architecture-decisions/#technology-choices","title":"Technology Choices","text":"<ul> <li>Ingress Controller: Traefik vs. NGINX vs. other options</li> <li>Service Mesh: Whether to adopt a service mesh and which one</li> <li>Database Platform: Database technology choices and patterns</li> <li>Message Queuing: Event streaming and message queue solutions</li> </ul>"},{"location":"governance-standards/architecture-decisions/#creating-adrs","title":"Creating ADRs","text":""},{"location":"governance-standards/architecture-decisions/#when-to-create-an-adr","title":"When to Create an ADR","text":"<p>Create an ADR when making decisions that:</p> <ul> <li>Affect Multiple Teams: Cross-cutting concerns that impact multiple components</li> <li>Have Long-term Impact: Decisions that are difficult or expensive to reverse</li> <li>Involve Trade-offs: Choices between competing technical approaches</li> <li>Establish Patterns: Decisions that set precedents for future development</li> <li>Impact Security/Compliance: Changes affecting security posture or compliance</li> <li>Require Stakeholder Buy-in: Decisions needing broader organizational approval</li> </ul>"},{"location":"governance-standards/architecture-decisions/#adr-creation-process","title":"ADR Creation Process","text":""},{"location":"governance-standards/architecture-decisions/#step-by-step-adr-creation","title":"Step-by-Step ADR Creation","text":"<ol> <li> <p>Copy Template:    <pre><code># Copy the template to create a new ADR\ncp docs/adrs/0000-template.md docs/adrs/NNNN-descriptive-title.md\n</code></pre></p> </li> <li> <p>Number Assignment:</p> <ul> <li>Use sequential numbering (0001, 0002, etc.)</li> <li>Check existing ADRs to determine next number</li> <li>Reserve numbers for in-progress ADRs</li> </ul> </li> <li> <p>Fill Out Sections:</p> <ul> <li>Context: Describe the problem and constraints</li> <li>Options: Research and document 3-5 viable alternatives</li> <li>Decision: Clearly state what was decided</li> <li>Rationale: Explain why this option was chosen</li> <li>Consequences: Document both positive and negative impacts</li> </ul> </li> <li> <p>Stakeholder Review:</p> <ul> <li>Share with relevant technical leads</li> <li>Include security and compliance review if applicable</li> <li>Incorporate feedback and update draft</li> </ul> </li> <li> <p>Approval Process:</p> <ul> <li>Technical approval from domain experts</li> <li>Management approval for significant decisions</li> <li>Security sign-off for security-impacting decisions</li> </ul> </li> <li> <p>Implementation Tracking:</p> <ul> <li>Link to implementation tasks or tickets</li> <li>Define success metrics and monitoring</li> <li>Schedule follow-up reviews</li> </ul> </li> </ol>"},{"location":"governance-standards/architecture-decisions/#adr-review-guidelines","title":"ADR Review Guidelines","text":"<p>Review Criteria: - [ ] Problem statement is clear and specific - [ ] Multiple options were considered - [ ] Decision rationale is well-documented - [ ] Consequences (both positive and negative) are identified - [ ] Validation approach is defined - [ ] Security and compliance impact assessed - [ ] Implementation plan is clear</p> <p>Review Participants: - Technical Lead: Domain expertise and technical feasibility - Security Engineer: Security implications and compliance - Platform Engineer: Infrastructure and operational impact - Product Owner: Business alignment and priority</p>"},{"location":"governance-standards/architecture-decisions/#adr-lifecycle-management","title":"ADR Lifecycle Management","text":""},{"location":"governance-standards/architecture-decisions/#adr-status-transitions","title":"ADR Status Transitions","text":""},{"location":"governance-standards/architecture-decisions/#maintenance-procedures","title":"Maintenance Procedures","text":"<p>Quarterly ADR Review: - Review all \"Accepted\" ADRs for continued relevance - Update status to \"Deprecated\" for outdated decisions - Create new ADRs for evolved approaches - Update implementation links and validation results</p> <p>ADR Updates: - Minor updates: Update version number and revision log - Major changes: Consider creating a new ADR that supersedes the original - Status changes: Update status and add superseding ADR references</p>"},{"location":"governance-standards/architecture-decisions/#adr-archive-management","title":"ADR Archive Management","text":"<p>File Organization: <pre><code>docs/adrs/\n\u251c\u2500\u2500 0000-template.md              # Template for new ADRs\n\u251c\u2500\u2500 0001-kubernetes-platform.md   # Platform choice\n\u251c\u2500\u2500 0002-secret-management.md     # Secret management approach\n\u251c\u2500\u2500 0003-monitoring-stack.md      # Observability decisions\n\u251c\u2500\u2500 0004-ingress-controller.md    # Ingress solution choice\n\u2514\u2500\u2500 superseded/                   # Archived superseded ADRs\n    \u2514\u2500\u2500 0002-old-secret-mgmt.md\n</code></pre></p> <p>Archival Process: - Move superseded ADRs to <code>superseded/</code> directory - Update references in superseding ADRs - Maintain redirect or reference in main ADR list</p>"},{"location":"governance-standards/architecture-decisions/#integration-with-development-process","title":"Integration with Development Process","text":""},{"location":"governance-standards/architecture-decisions/#adr-requirements-in-development","title":"ADR Requirements in Development","text":"<p>For Infrastructure Changes: - New platform component adoptions require ADR - Major configuration changes need ADR review - Security model changes must have ADR approval</p> <p>For Application Patterns: - New application architecture patterns - Development toolchain changes - CI/CD workflow modifications</p>"},{"location":"governance-standards/architecture-decisions/#adr-review-in-pull-requests","title":"ADR Review in Pull Requests","text":"<p>Pull Request Template should include: <pre><code>## Architecture Decision Record\n- [ ] This change requires an ADR (significant architectural decision)\n- [ ] ADR has been created and approved: [Link to ADR]\n- [ ] This change implements an existing ADR: [Link to ADR]\n- [ ] No ADR required (minor change with no architectural impact)\n</code></pre></p>"},{"location":"governance-standards/architecture-decisions/#adr-impact-assessment","title":"ADR Impact Assessment","text":"<p>Before Implementation: - Review existing ADRs for conflicts or dependencies - Assess whether new ADR supersedes existing decisions - Identify stakeholders who need to be informed</p> <p>During Implementation: - Reference ADR in code comments for context - Include ADR links in configuration documentation - Update ADR with implementation lessons learned</p> <p>After Implementation: - Validate ADR predictions against actual outcomes - Update ADR with real-world results and metrics - Schedule periodic review based on validation plan</p>"},{"location":"governance-standards/architecture-decisions/#tooling-and-automation","title":"Tooling and Automation","text":""},{"location":"governance-standards/architecture-decisions/#adr-generation-tools","title":"ADR Generation Tools","text":"<p>ADR CLI Tools (Optional enhancements): <pre><code># Install ADR tools (if team decides to adopt)\nnpm install -g adr-log adr-viewer\n\n# Generate ADR index\nadr-log -d docs/adrs/ &gt; adr-index.md\n\n# Create interactive ADR browser\nadr-viewer -d docs/adrs/ -o adr-browser/\n</code></pre></p>"},{"location":"governance-standards/architecture-decisions/#integration-with-documentation","title":"Integration with Documentation","text":"<p>TechDocs Integration: This page automatically links to ADRs in the repository: - Direct Links: Links point to ADR files in the repository - Status Tracking: ADR status is maintained in the individual files - Search Integration: ADRs are searchable through TechDocs search</p> <p>Backstage Integration: ADRs can be linked from component entities: <pre><code># In component definitions\nannotations:\n  backstage.io/adr-location: docs/adrs\n</code></pre></p>"},{"location":"governance-standards/architecture-decisions/#contributing-to-adrs","title":"Contributing to ADRs","text":""},{"location":"governance-standards/architecture-decisions/#adr-contribution-guidelines","title":"ADR Contribution Guidelines","text":"<p>Who Can Create ADRs: - Technical leads and architects - Senior engineers making significant architectural decisions - Product managers for cross-cutting business decisions - Security engineers for security-related architectural choices</p> <p>ADR Quality Standards: - Clear problem statement with business context - At least 3 alternative options considered - Explicit trade-offs and consequences documented - Validation approach with measurable outcomes - Regular review and update schedule defined</p>"},{"location":"governance-standards/architecture-decisions/#adr-communication","title":"ADR Communication","text":"<p>Notification Process: - New ADRs shared in team channels and all-hands meetings - Status changes communicated to affected teams - Quarterly ADR summary in engineering updates</p> <p>Training and Onboarding: - New team members review key ADRs during onboarding - ADR writing workshops for technical leads - Regular \"ADR retrospectives\" to review decision outcomes</p>"},{"location":"governance-standards/architecture-decisions/#related-resources","title":"Related Resources","text":""},{"location":"governance-standards/architecture-decisions/#architecture-documentation","title":"Architecture Documentation","text":"<ul> <li>\ud83c\udfd7\ufe0f Infrastructure Overview<p>Review the technical architecture that ADRs help shape</p> </li> </ul> <ul> <li>\ud83d\udd27 Platform Components<p>Understand the components governed by architectural decisions</p> </li> </ul> <ul> <li>\ud83d\udccb Operational Standards<p>See how ADRs integrate with operational procedures</p> </li> </ul> <ul> <li>\ud83d\udee1\ufe0f Security Policies<p>Review security-related architectural decisions and policies</p> </li> </ul>"},{"location":"governance-standards/architecture-decisions/#external-references","title":"External References","text":"<ul> <li>MADR Template: Markdown Architecture Decision Records format</li> <li>ADR GitHub Organization: Tools and resources for ADRs</li> <li>Architecture Decision Records: Original ADR concept by Michael Nygard</li> </ul> <p>\ud83d\udccb ADR Maintenance: ADRs are living documents that should evolve with the platform. Schedule regular reviews and updates to ensure they remain accurate and valuable.</p>"},{"location":"governance-standards/operational-standards/","title":"Operational Standards","text":"<p>This page documents the operational standards, maintenance procedures, and governance processes for the WebGrip platform and its documentation.</p>"},{"location":"governance-standards/operational-standards/#documentation-maintenance","title":"Documentation Maintenance","text":""},{"location":"governance-standards/operational-standards/#techdocs-maintenance","title":"TechDocs Maintenance","text":"<p>Responsibility: Infrastructure Team Review Schedule: Quarterly or after major platform changes Update Triggers: Infrastructure changes, new component deployments, architectural decisions</p>"},{"location":"governance-standards/operational-standards/#maintenance-process","title":"Maintenance Process","text":"<p>1. Content Review: <pre><code># Review all documentation links\nfind docs/techdocs/docs -name \"*.md\" -exec grep -l \"https\\|http\\|\\./\" {} \\;\n\n# Check for broken internal links\n# Use markdown link checker or manual verification\n\n# Validate external references\n# Ensure all repository links point to existing files\n</code></pre></p> <p>2. Information Architecture Updates: - Review IA for new platform components - Add new sections for major architectural changes - Update navigation in <code>mkdocs.yml</code> for new content - Ensure cross-references remain accurate</p> <p>3. Content Accuracy Validation: - Verify configuration examples against actual repository files - Update version numbers and tool versions - Validate command examples and procedures - Test deployment procedures in staging environment</p> <p>4. Repository Alignment: - Ensure documentation structure mirrors repository organization - Update file paths when repository structure changes - Maintain assumption blocks for inferred behavior - Add new ADRs for significant architectural decisions</p>"},{"location":"governance-standards/operational-standards/#techdocs-publishing-process","title":"TechDocs Publishing Process","text":"<p>Automated Publishing: <code>.github/workflows/on_docs_change.yml</code></p> <pre><code># Automatic publishing workflow\nname: '[Workflow] On Documentation Change'\non:\n  push:\n    branches: ['main']\n    paths: ['docs/techdocs/**']\n  workflow_dispatch:\n\njobs:\n  generate-documentation:\n    name: 'Generate'\n    uses: webgrip/workflows/.github/workflows/techdocs-generate.yml@main\n    with:\n      source-dir: 'docs/techdocs'\n\n  deploy-documentation:\n    name: 'Deploy'\n    uses: webgrip/workflows/.github/workflows/techdocs-deploy-gh-pages.yml@main\n    needs: generate-documentation\n</code></pre> <p>Manual Publishing (if needed): <pre><code># Local TechDocs generation and testing\ncd docs/techdocs\nmkdocs serve\n\n# Build for production\nmkdocs build\n\n# Verify build output\nls -la site/\n</code></pre></p>"},{"location":"governance-standards/operational-standards/#content-update-guidelines","title":"Content Update Guidelines","text":"<p>Adding New Platform Components: 1. Create Component Page: Add page in <code>platform-components/</code> directory 2. Update Navigation: Add entry to <code>mkdocs.yml</code> navigation 3. Cross-Reference: Link from related pages (architecture, runbooks) 4. Backstage Integration: Update component catalog entries 5. Review Process: Technical review before publishing</p> <p>Updating Existing Content: 1. Identify Impact: Assess which pages need updates 2. Maintain Links: Ensure all links remain valid 3. Update Assumptions: Review and update assumption blocks 4. Version Tracking: Note significant changes in commit messages</p>"},{"location":"governance-standards/operational-standards/#backstage-maintenance","title":"Backstage Maintenance","text":"<p>Entity Definition Updates: - Quarterly Review: Verify all entity definitions are accurate - Ownership Updates: Update component ownership when teams change - Lifecycle Management: Promote experimental \u2192 production, mark deprecated - Relationship Mapping: Ensure component dependencies are current</p> <p>Catalog Hygiene: <pre><code># Validate catalog entities\ncd catalog/\nfind . -name \"*.yaml\" -exec yamllint {} \\;\n\n# Check for orphaned entities\n# Verify all referenced entities exist\n\n# Update entity metadata\n# Ensure annotations and links are current\n</code></pre></p>"},{"location":"governance-standards/operational-standards/#platform-maintenance","title":"Platform Maintenance","text":""},{"location":"governance-standards/operational-standards/#infrastructure-maintenance","title":"Infrastructure Maintenance","text":"<p>Regular Maintenance Tasks: | Task | Frequency | Responsibility | Documentation | |------|-----------|----------------|---------------| | Cluster Updates | Monthly | Infrastructure Team | Infrastructure Overview | | Certificate Monitoring | Weekly | Platform Team | Certificate Management | | Secret Rotation | Quarterly | Security Team | Security Model | | Backup Verification | Monthly | Infrastructure Team | Backup Procedures | | Monitoring Review | Bi-weekly | Platform Team | Monitoring &amp; Observability |</p>"},{"location":"governance-standards/operational-standards/#component-lifecycle-management","title":"Component Lifecycle Management","text":"<p>Component Status Tracking:</p> <p></p> <p>Lifecycle Management Process: 1. Component Assessment: Regular review of component status and health 2. Promotion Criteria: Define criteria for experimental \u2192 production 3. Deprecation Planning: Plan migration path for deprecated components 4. Documentation Updates: Update component status in documentation and catalog</p>"},{"location":"governance-standards/operational-standards/#security-maintenance","title":"Security Maintenance","text":"<p>Security Review Schedule: - Monthly: Vulnerability scanning and patching - Quarterly: Access review and privilege audit - Annually: Security policy review and updates - As Needed: Incident response and security updates</p> <p>Security Maintenance Tasks: <pre><code># Regular security tasks\nkubectl get pods -A --field-selector=status.phase!=Running\nkubectl get certificates -A --field-selector=spec.issuerRef.name=expired\n\n# Audit RBAC permissions\nkubectl auth can-i --list --as=user@example.com\n\n# Review network policies\nkubectl get networkpolicies -A\n</code></pre></p>"},{"location":"governance-standards/operational-standards/#change-management","title":"Change Management","text":""},{"location":"governance-standards/operational-standards/#documentation-change-process","title":"Documentation Change Process","text":"<p>Change Types: | Change Type | Approval Required | Review Process | |-------------|------------------|----------------| | Content Updates | Technical Review | Peer review + platform team | | Structure Changes | Architecture Review | Technical lead + stakeholder review | | Navigation Changes | UX Review | User experience validation | | Tool Updates | Platform Review | Infrastructure team approval |</p> <p>Change Workflow:</p> <p></p>"},{"location":"governance-standards/operational-standards/#platform-change-management","title":"Platform Change Management","text":"<p>Change Categories: - Emergency Changes: Critical security or availability fixes - Standard Changes: Regular updates and improvements - Major Changes: Architectural changes requiring ADR</p> <p>Change Approval Matrix: | Change Impact | Approver | Documentation Required | |---------------|----------|----------------------| | Low Impact | Platform Engineer | Update existing docs | | Medium Impact | Technical Lead | ADR + documentation update | | High Impact | Architecture Review Board | ADR + stakeholder review | | Emergency | On-call Engineer | Post-change documentation |</p>"},{"location":"governance-standards/operational-standards/#quality-assurance","title":"Quality Assurance","text":""},{"location":"governance-standards/operational-standards/#documentation-quality-standards","title":"Documentation Quality Standards","text":"<p>Content Quality Checklist: - [ ] Clear purpose statement for each page - [ ] Target audience identified - [ ] Step-by-step procedures where applicable - [ ] Links to source files and configurations - [ ] Assumption blocks for inferred behavior - [ ] Cross-references to related content - [ ] Diagrams for complex relationships - [ ] Examples and code snippets - [ ] Troubleshooting guidance - [ ] Next steps and related resources</p> <p>Technical Accuracy Validation: - [ ] All links resolve correctly - [ ] Command examples tested and verified - [ ] Configuration snippets accurate - [ ] Version numbers current - [ ] Repository paths correct - [ ] Assumptions validated where possible</p>"},{"location":"governance-standards/operational-standards/#platform-quality-standards","title":"Platform Quality Standards","text":"<p>Infrastructure Quality Gates: - [ ] All components have health checks - [ ] Resource limits defined - [ ] Security contexts applied - [ ] Monitoring configured - [ ] Backup procedures tested - [ ] Disaster recovery validated - [ ] Documentation current - [ ] ADRs documented for major decisions</p>"},{"location":"governance-standards/operational-standards/#team-structure-and-responsibilities","title":"Team Structure and Responsibilities","text":""},{"location":"governance-standards/operational-standards/#team-organization","title":"Team Organization","text":""},{"location":"governance-standards/operational-standards/#responsibility-matrix","title":"Responsibility Matrix","text":"Area Primary Owner Secondary Responsibilities Cluster Infrastructure Infrastructure Team Platform Team K8s cluster, nodes, networking Platform Components Platform Team Infrastructure Team Ingress, monitoring, CI/CD Security Security Team All Teams Access control, secrets, policies Documentation Platform Team All Teams TechDocs, runbooks, ADRs Backup &amp; Recovery Infrastructure Team Platform Team Data protection, disaster recovery Monitoring Platform Team Infrastructure Team Observability, alerting, dashboards"},{"location":"governance-standards/operational-standards/#on-call-responsibilities","title":"On-Call Responsibilities","text":"<p>On-Call Rotation: - Primary: Platform Engineer (24/7 coverage) - Secondary: Infrastructure Team Lead - Escalation: Engineering Manager \u2192 CTO</p> <p>On-Call Duties: - Respond to critical platform alerts - Perform emergency maintenance - Coordinate incident response - Document incidents and resolutions - Update runbooks based on incidents</p>"},{"location":"governance-standards/operational-standards/#compliance-and-governance","title":"Compliance and Governance","text":""},{"location":"governance-standards/operational-standards/#governance-framework","title":"Governance Framework","text":"<p>Decision Making: - Technical Decisions: Technical leads with peer review - Architectural Decisions: Architecture Review Board - Security Decisions: Security team with compliance review - Business Decisions: Engineering management with stakeholder input</p> <p>Architecture Review Board: - Members: Senior engineers, technical leads, security representative - Meeting Schedule: Bi-weekly or as needed for major decisions - Scope: Platform architecture, technology choices, major changes - Output: ADRs documenting decisions and rationale</p>"},{"location":"governance-standards/operational-standards/#compliance-requirements","title":"Compliance Requirements","text":"<p>Documentation Compliance: - [ ] All architectural decisions documented in ADRs - [ ] Security procedures documented and reviewed - [ ] Access controls documented and audited - [ ] Change management processes followed - [ ] Incident response procedures current</p> <p>Platform Compliance: - [ ] Security scanning integrated in CI/CD - [ ] Access controls regularly audited - [ ] Data protection measures implemented - [ ] Backup and recovery procedures tested - [ ] Vulnerability management process active</p>"},{"location":"governance-standards/operational-standards/#metrics-and-monitoring","title":"Metrics and Monitoring","text":""},{"location":"governance-standards/operational-standards/#documentation-metrics","title":"Documentation Metrics","text":"<p>Usage Metrics: - Page views and engagement analytics - Search queries and results - User feedback and satisfaction scores - Link click-through rates</p> <p>Quality Metrics: - Documentation freshness (last updated) - Link health (broken link detection) - Content completeness scores - User journey completion rates</p>"},{"location":"governance-standards/operational-standards/#platform-metrics","title":"Platform Metrics","text":"<p>Operational Metrics: - Platform uptime and availability - Deployment frequency and success rate - Mean time to recovery (MTTR) - Change failure rate</p> <p>Usage Metrics: - Active users and applications - Resource utilization trends - Cost per application - Developer productivity metrics</p>"},{"location":"governance-standards/operational-standards/#continuous-improvement","title":"Continuous Improvement","text":""},{"location":"governance-standards/operational-standards/#improvement-process","title":"Improvement Process","text":"<p>Quarterly Reviews: 1. Metrics Analysis: Review platform and documentation metrics 2. User Feedback: Collect and analyze user feedback 3. Gap Analysis: Identify documentation and platform gaps 4. Improvement Planning: Plan improvements for next quarter 5. Process Updates: Update procedures based on lessons learned</p> <p>Feedback Channels: - Documentation: GitHub issues and pull requests - Platform: Slack channels and team meetings - Formal: Quarterly surveys and reviews - Incident-Driven: Post-incident reviews and improvements</p>"},{"location":"governance-standards/operational-standards/#innovation-and-experimentation","title":"Innovation and Experimentation","text":"<p>Technology Evaluation: - Regular assessment of new tools and technologies - Proof-of-concept development for promising solutions - Community engagement and open source contributions - Knowledge sharing through documentation and presentations</p> <p>Continuous Learning: - Team training and certification programs - Conference attendance and knowledge sharing - Internal lunch-and-learns and tech talks - Documentation of lessons learned and best practices</p>"},{"location":"governance-standards/operational-standards/#next-steps","title":"Next Steps","text":""},{"location":"governance-standards/operational-standards/#immediate-actions","title":"Immediate Actions","text":"<p>For New Team Members: 1. Review Documentation: Read through platform documentation 2. Access Setup: Ensure appropriate access and permissions 3. Tool Installation: Install required development tools 4. First Deployment: Complete onboarding guide exercises 5. Team Integration: Join relevant Slack channels and meetings</p> <p>For Platform Updates: 1. Documentation Review: Assess impact on documentation 2. ADR Creation: Document significant architectural decisions 3. Stakeholder Communication: Notify affected teams 4. Monitoring Setup: Ensure appropriate monitoring and alerting 5. Rollback Planning: Prepare rollback procedures</p>"},{"location":"governance-standards/operational-standards/#long-term-planning","title":"Long-term Planning","text":"<p>Platform Evolution: - Roadmap for major platform enhancements - Technology refresh and modernization plans - Capacity planning and scaling strategies - Security enhancement initiatives</p> <p>Documentation Evolution: - Information architecture improvements - User experience enhancements - Automation and tooling improvements - Community contribution processes</p> <p>\ud83d\udccb Operational Excellence: These standards ensure the platform remains reliable, secure, and well-documented. Regular review and updates keep our operations aligned with best practices and organizational needs.</p>"},{"location":"operations-runbooks/deployment-procedures/","title":"Deployment Procedures","text":"<p>This page documents the standardized deployment procedures for the WebGrip platform, covering infrastructure updates, application deployments, and emergency procedures.</p>"},{"location":"operations-runbooks/deployment-procedures/#deployment-philosophy","title":"Deployment Philosophy","text":"<p>Our deployment strategy follows these core principles:</p> <ul> <li>\ud83d\udd04 GitOps: All deployments flow through Git with proper review</li> <li>\ud83d\ude80 Automation First: Minimize manual intervention and human error</li> <li>\ud83d\udee1\ufe0f Safety by Default: Comprehensive validation and rollback capabilities</li> <li>\ud83d\udcca Observable: Full visibility into deployment status and health</li> <li>\u26a1 Fast Recovery: Quick rollback and incident response procedures</li> </ul>"},{"location":"operations-runbooks/deployment-procedures/#deployment-types","title":"Deployment Types","text":""},{"location":"operations-runbooks/deployment-procedures/#infrastructure-deployments","title":"Infrastructure Deployments","text":"<p>Purpose: Deploy platform components and cluster infrastructure Technology: Helm + GitHub Actions Configuration: <code>ops/helm/</code></p>"},{"location":"operations-runbooks/deployment-procedures/#infrastructure-deployment-flow","title":"Infrastructure Deployment Flow","text":""},{"location":"operations-runbooks/deployment-procedures/#infrastructure-chart-deployment-order","title":"Infrastructure Chart Deployment Order","text":"<p>Charts are numbered to ensure proper deployment order:</p> Order Chart Purpose Dependencies 005 <code>tainters</code> Node taints and tolerations None 007 <code>cluster-monitoring</code> Platform monitoring stack Node configuration 010 <code>cert-manager</code> Certificate automation Cluster monitoring 020 <code>cluster-issuers</code> Certificate issuers cert-manager 030 <code>ingress-controllers</code> Ingress and load balancing Certificate issuers 040 <code>gha-runners-controller</code> CI/CD infrastructure Ingress controllers 045 <code>gha-runners</code> Runner instances Controller 060 <code>grafana-stack</code> Observability dashboards Monitoring stack 950 <code>example-services</code> Demo applications All platform services"},{"location":"operations-runbooks/deployment-procedures/#infrastructure-deployment-commands","title":"Infrastructure Deployment Commands","text":"<pre><code># Manual deployment (for authorized personnel)\n# Note: Prefer GitHub Actions for production deployments\n\n# 1. Connect to cluster\naws eks update-kubeconfig --name staging-eks-cluster --region eu-west-1\n\n# 2. Deploy specific chart\nhelm upgrade --install &lt;chart-name&gt; ./ops/helm/&lt;chart-directory&gt;/ \\\n  --namespace &lt;namespace&gt; \\\n  --create-namespace \\\n  --values ./ops/helm/&lt;chart-directory&gt;/values.yaml\n\n# 3. Verify deployment\nkubectl get pods -n &lt;namespace&gt;\nkubectl get services -n &lt;namespace&gt;\n\n# 4. Check component health\nkubectl describe deployment -n &lt;namespace&gt; &lt;deployment-name&gt;\n</code></pre>"},{"location":"operations-runbooks/deployment-procedures/#application-deployments","title":"Application Deployments","text":"<p>Purpose: Deploy business applications and services Technology: GitHub Actions + Application Templates Workflows: <code>.github/workflows/create_new_application.yml</code></p>"},{"location":"operations-runbooks/deployment-procedures/#application-lifecycle-automation","title":"Application Lifecycle Automation","text":""},{"location":"operations-runbooks/deployment-procedures/#application-deployment-workflow","title":"Application Deployment Workflow","text":"<p>Workflow: <code>create_new_application.yml</code></p> <p>The automated application creation process:</p> <ol> <li>Template Creation: Clone from <code>application-template</code> repository</li> <li>Repository Setup: Configure repository settings and permissions</li> <li>Copilot Bootstrap: AI-powered application setup and customization</li> <li>Secret Management: Configure encrypted secrets for application</li> <li>CI/CD Setup: Enable automated deployment pipelines</li> <li>Documentation: Generate application documentation</li> </ol> <p>Required Secrets: - <code>WEBGRIP_CI_CLIENT_ID</code>: GitHub App ID for automation - <code>WEBGRIP_CI_APP_PRIVATE_KEY</code>: GitHub App private key - <code>OPENAI_API_KEY</code>: OpenAI API key for Copilot features - <code>OPENAI_ORG_ID</code>: OpenAI Organization ID</p>"},{"location":"operations-runbooks/deployment-procedures/#application-deployment-example","title":"Application Deployment Example","text":"<pre><code># Application deployment template\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-application\n  namespace: applications\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: my-application\n  template:\n    metadata:\n      labels:\n        app: my-application\n    spec:\n      containers:\n      - name: app\n        image: myregistry/my-application:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre>"},{"location":"operations-runbooks/deployment-procedures/#documentation-deployments","title":"Documentation Deployments","text":"<p>Purpose: Publish TechDocs and documentation updates Technology: MkDocs + GitHub Actions Workflow: <code>.github/workflows/on_docs_change.yml</code></p>"},{"location":"operations-runbooks/deployment-procedures/#documentation-deployment-flow","title":"Documentation Deployment Flow","text":"<p>Automatic Triggers: - Changes to <code>docs/techdocs/**</code> - Manual workflow dispatch - Scheduled documentation updates</p>"},{"location":"operations-runbooks/deployment-procedures/#secret-management-deployment","title":"Secret Management Deployment","text":""},{"location":"operations-runbooks/deployment-procedures/#sops-encrypted-secrets","title":"SOPS-Encrypted Secrets","text":"<p>Technology: SOPS + Age Configuration: <code>ops/secrets/</code></p>"},{"location":"operations-runbooks/deployment-procedures/#secret-deployment-process","title":"Secret Deployment Process","text":"<pre><code># 1. Decrypt secrets for deployment (authorized personnel only)\nmake decrypt-secrets SECRETS_DIR=./ops/secrets/&lt;component-name&gt;\n\n# 2. Verify secret values (do not log or expose)\ncat ./ops/secrets/&lt;component-name&gt;/values.dec.yaml\n\n# 3. Deploy chart with decrypted secrets\nhelm upgrade --install &lt;component&gt; ./ops/helm/&lt;chart&gt;/ \\\n  --values ./ops/secrets/&lt;component-name&gt;/values.dec.yaml\n\n# 4. Clean up decrypted files\nrm ./ops/secrets/&lt;component-name&gt;/values.dec.yaml\n</code></pre>"},{"location":"operations-runbooks/deployment-procedures/#secret-categories","title":"Secret Categories","text":"Secret Category Purpose Components 007-kube-prometheus-stack-secrets Monitoring credentials Prometheus, AlertManager 010-cert-manager-secrets Certificate authority keys cert-manager, ACME 030-ingress-controllers Ingress configuration Traefik middleware 045-gha-runners-secrets CI/CD runner credentials GitHub Actions runners 060-grafana-stack Dashboard credentials Grafana, data sources"},{"location":"operations-runbooks/deployment-procedures/#secret-rotation-procedure","title":"Secret Rotation Procedure","text":"<pre><code># 1. Generate new secret values\n# 2. Update decrypted values file\nvim ./ops/secrets/&lt;component&gt;/values.dec.yaml\n\n# 3. Re-encrypt with SOPS\nmake encrypt-secrets SECRETS_DIR=./ops/secrets/&lt;component&gt;\n\n# 4. Commit encrypted changes\ngit add ./ops/secrets/&lt;component&gt;/values.sops.yaml\ngit commit -m \"feat: rotate secrets for &lt;component&gt;\"\n\n# 5. Deploy updated secrets\n# (Follow standard deployment process)\n</code></pre>"},{"location":"operations-runbooks/deployment-procedures/#deployment-validation","title":"Deployment Validation","text":""},{"location":"operations-runbooks/deployment-procedures/#pre-deployment-checks","title":"Pre-Deployment Checks","text":"<p>Automated Validation (GitHub Actions): <pre><code># Example validation steps\n- name: Validate Helm Charts\n  run: |\n    helm lint ./ops/helm/*/\n    helm template ./ops/helm/*/ --validate\n\n- name: Security Scanning\n  run: |\n    # Scan for secrets in code\n    truffleHog --regex --entropy=False .\n\n    # Scan container images\n    trivy image &lt;image-name&gt;\n\n- name: YAML Validation\n  run: |\n    yamllint ./ops/helm/*/values.yaml\n    kubeval ./ops/helm/*/templates/*.yaml\n</code></pre></p> <p>Manual Validation Checklist: - [ ] Chart version updated appropriately - [ ] Resource limits and requests defined - [ ] Health checks configured - [ ] Security context applied - [ ] Network policies reviewed - [ ] Secret management verified - [ ] Monitoring and logging enabled - [ ] Documentation updated</p>"},{"location":"operations-runbooks/deployment-procedures/#post-deployment-verification","title":"Post-Deployment Verification","text":"<p>Automated Health Checks: <pre><code># Check deployment status\nkubectl get deployments -A\nkubectl get pods -A --field-selector=status.phase!=Running\n\n# Verify service endpoints\nkubectl get endpoints -A\n\n# Check certificate status  \nkubectl get certificates -A\n\n# Monitor resource usage\nkubectl top nodes\nkubectl top pods -A\n</code></pre></p> <p>Health Check Endpoints: - Platform Health: <code>/health</code> endpoints on all services - Traefik Dashboard: <code>make view-traefik</code> - Grafana Dashboards: <code>make view-grafana</code> - Prometheus Metrics: Check platform metrics and alerts</p>"},{"location":"operations-runbooks/deployment-procedures/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"operations-runbooks/deployment-procedures/#automatic-rollback","title":"Automatic Rollback","text":"<p>Trigger Conditions: - Health check failures after deployment - Critical error rate thresholds exceeded - Resource exhaustion or crashes - Security vulnerability detection</p> <p>Rollback Process: <pre><code># Helm rollback (automatic via monitoring)\nhelm rollback &lt;release-name&gt; &lt;previous-revision&gt; --namespace &lt;namespace&gt;\n\n# Verify rollback success\nkubectl get deployments -n &lt;namespace&gt;\nkubectl describe deployment -n &lt;namespace&gt; &lt;deployment-name&gt;\n\n# Check application health\ncurl -f http://&lt;service-endpoint&gt;/health\n</code></pre></p>"},{"location":"operations-runbooks/deployment-procedures/#manual-rollback","title":"Manual Rollback","text":"<p>Emergency Rollback Procedure: <pre><code># 1. Identify current and previous revisions\nhelm history &lt;release-name&gt; --namespace &lt;namespace&gt;\n\n# 2. Rollback to previous working version\nhelm rollback &lt;release-name&gt; &lt;working-revision&gt; --namespace &lt;namespace&gt;\n\n# 3. Verify rollback\nkubectl get pods -n &lt;namespace&gt; -l app=&lt;app-name&gt;\n\n# 4. Update monitoring and alerts\n# Notify team of rollback via incident response\n\n# 5. Investigate root cause\nkubectl logs -n &lt;namespace&gt; deployment/&lt;deployment-name&gt; --previous\n</code></pre></p>"},{"location":"operations-runbooks/deployment-procedures/#rollback-testing","title":"Rollback Testing","text":"<p>Rollback Validation: - Test rollback procedures in staging environment - Verify data consistency after rollback - Validate external integrations still function - Confirm monitoring and alerting operational</p>"},{"location":"operations-runbooks/deployment-procedures/#deployment-environments","title":"Deployment Environments","text":""},{"location":"operations-runbooks/deployment-procedures/#environment-strategy","title":"Environment Strategy","text":""},{"location":"operations-runbooks/deployment-procedures/#environment-configuration","title":"Environment Configuration","text":"Environment Purpose Access Auto-Deploy Development Local testing and development Developers Manual Staging Integration testing and validation Internal teams Auto from <code>main</code> Production Live user traffic Restricted Manual approval"},{"location":"operations-runbooks/deployment-procedures/#environment-variables","title":"Environment Variables","text":"<pre><code># Environment-specific configuration\nenvironments:\n  staging:\n    replicas: 1\n    resources:\n      requests:\n        memory: \"128Mi\"\n        cpu: \"50m\"\n    ingress:\n      host: \"staging.example.com\"\n\n  production:\n    replicas: 3\n    resources:\n      requests:\n        memory: \"256Mi\"\n        cpu: \"100m\"\n    ingress:\n      host: \"api.example.com\"\n</code></pre>"},{"location":"operations-runbooks/deployment-procedures/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"operations-runbooks/deployment-procedures/#deployment-monitoring","title":"Deployment Monitoring","text":"<p>Deployment Metrics: - Deployment Frequency: Tracked via GitHub Actions - Lead Time: Time from commit to production - Change Failure Rate: Failed deployments requiring rollback - Mean Time to Recovery: Time to resolve deployment issues</p> <p>Monitoring Dashboards: - Deployment Overview: Deployment status and history - Resource Utilization: CPU, memory, and storage usage - Application Health: Service health and performance</p>"},{"location":"operations-runbooks/deployment-procedures/#alerting","title":"Alerting","text":"<p>Critical Deployment Alerts: - Failed deployment or rollback - Resource exhaustion after deployment - Service unavailability - Certificate expiration - Security vulnerability detection</p> <p>Alert Channels: - Slack notifications for deployment status - Email alerts for critical failures - PagerDuty integration for production incidents</p>"},{"location":"operations-runbooks/deployment-procedures/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"operations-runbooks/deployment-procedures/#critical-issue-response","title":"Critical Issue Response","text":"<p>Severity Levels: - P0 (Critical): Production outage affecting all users - P1 (High): Major functionality degraded - P2 (Medium): Minor issues with workarounds - P3 (Low): Cosmetic or documentation issues</p> <p>Emergency Response Steps: 1. Immediate Assessment: Determine scope and impact 2. Emergency Rollback: Rollback if deployment-related 3. Incident Communication: Notify stakeholders and teams 4. Root Cause Analysis: Investigate and document findings 5. Prevention Measures: Implement safeguards to prevent recurrence</p>"},{"location":"operations-runbooks/deployment-procedures/#emergency-contacts","title":"Emergency Contacts","text":"<p>Escalation Path: 1. Platform Engineer (on-call) 2. Infrastructure Team Lead 3. Engineering Manager 4. CTO (for critical business impact)</p> <p>Communication Channels: - Slack: <code>#incidents</code> channel for real-time coordination - Email: Incident distribution list - Phone: For critical outages requiring immediate response</p>"},{"location":"operations-runbooks/deployment-procedures/#best-practices","title":"Best Practices","text":""},{"location":"operations-runbooks/deployment-procedures/#deployment-safety","title":"Deployment Safety","text":"<p>Pre-Deployment: - [ ] Test deployments in staging environment - [ ] Verify resource requirements and limits - [ ] Review security configurations - [ ] Update documentation and runbooks - [ ] Notify stakeholders of planned changes</p> <p>During Deployment: - [ ] Monitor deployment progress actively - [ ] Watch application and infrastructure metrics - [ ] Be prepared to rollback quickly - [ ] Communicate status to relevant teams</p> <p>Post-Deployment: - [ ] Verify all services are healthy - [ ] Monitor error rates and performance metrics - [ ] Update deployment documentation - [ ] Conduct brief retrospective for major changes</p>"},{"location":"operations-runbooks/deployment-procedures/#performance-optimization","title":"Performance Optimization","text":"<p>Deployment Performance: - Use parallel Helm deployments where possible - Optimize container image sizes - Implement proper resource requests and limits - Use rolling updates with appropriate surge settings</p> <p>Monitoring Performance: - Track deployment duration and success rates - Monitor resource utilization trends - Identify and address deployment bottlenecks</p>"},{"location":"operations-runbooks/deployment-procedures/#next-steps","title":"Next Steps","text":"<p>Explore related operational topics:</p> <ul> <li>\ud83d\udcca Monitoring &amp; Alerting<p>Learn about platform monitoring, metrics, and alerting procedures</p> </li> </ul> <ul> <li>\ud83d\udea8 Incident Response<p>Understand incident response procedures and escalation paths</p> </li> </ul> <ul> <li>\ud83d\udd27 Maintenance Tasks<p>Review routine maintenance procedures and schedules</p> </li> </ul> <ul> <li>\ud83d\udd10 Secret Management<p>Deep dive into SOPS-based secret management and rotation</p> </li> </ul> <p>\ud83d\ude80 Deployment Safety: Always test deployment procedures in staging before applying to production. When in doubt, favor manual verification over automated deployment.</p>"},{"location":"platform-components/certificate-management/","title":"Macro Syntax Error","text":"<p>File: <code>platform-components/certificate-management.md</code></p> <p>Line 433 in Markdown file: unexpected char '$' at 10099 <pre><code>    description: \"Certificate {{ $labels.name }} in namespace {{ $labels.namespace }} expires in less than 7 days\"\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/","title":"Ingress &amp; Load Balancing","text":"<p>The WebGrip platform uses Traefik as the primary ingress controller, providing advanced traffic management, automatic service discovery, and comprehensive observability for HTTP and TCP traffic.</p>"},{"location":"platform-components/ingress-load-balancing/#traefik-overview","title":"Traefik Overview","text":"<p>Technology: Traefik v3.1 Configuration: <code>ops/helm/030-ingress-controllers/ingress-traefik/</code> Custom Middleware: <code>ops/helm/030-ingress-controllers/ingress-traefik-custom-middlewares/</code></p> <p>Traefik serves as the edge router for the platform, providing:</p> <ul> <li>\ud83d\udd0d Automatic Service Discovery: Native Kubernetes integration</li> <li>\ud83d\udd12 TLS Termination: Integration with cert-manager for automatic certificates</li> <li>\u26a1 High Performance: Efficient reverse proxy with minimal overhead</li> <li>\ud83d\udcca Built-in Observability: Metrics, tracing, and access logging</li> <li>\ud83d\udee1\ufe0f Security Features: Rate limiting, authentication, and access control</li> </ul>"},{"location":"platform-components/ingress-load-balancing/#architecture","title":"Architecture","text":""},{"location":"platform-components/ingress-load-balancing/#traefik-components","title":"Traefik Components","text":""},{"location":"platform-components/ingress-load-balancing/#traffic-flow","title":"Traffic Flow","text":"<p>The request flow through Traefik follows this pattern:</p> <p></p>"},{"location":"platform-components/ingress-load-balancing/#configuration","title":"Configuration","text":""},{"location":"platform-components/ingress-load-balancing/#helm-chart-configuration","title":"Helm Chart Configuration","text":"<p>Chart Location: <code>ops/helm/030-ingress-controllers/ingress-traefik/</code></p> <p>Key Configuration Areas:</p> <pre><code># Example Traefik values configuration\ntraefik:\n  # Enable dashboard and API\n  api:\n    dashboard: true\n    insecure: false  # Secure dashboard access\n\n  # Define entrypoints\n  ports:\n    web:\n      port: 8000\n      exposedPort: 80\n      protocol: TCP\n    websecure:\n      port: 8443\n      exposedPort: 443\n      protocol: TCP\n      tls:\n        enabled: true\n\n  # Resource allocation\n  resources:\n    requests:\n      cpu: 100m\n      memory: 50Mi\n    limits:\n      cpu: 300m\n      memory: 150Mi\n\n  # High availability\n  deployment:\n    replicas: 2\n\n  # Observability\n  metrics:\n    prometheus:\n      enabled: true\n  tracing:\n    enabled: true\n  accessLog:\n    enabled: true\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#service-configuration","title":"Service Configuration","text":"<p>Kubernetes Service Types: - LoadBalancer: For external traffic routing - ClusterIP: For internal dashboard access - NodePort: For debugging and direct access</p> <pre><code># Example service configuration\napiVersion: v1\nkind: Service\nmetadata:\n  name: traefik\n  namespace: ingress-traefik\nspec:\n  type: LoadBalancer\n  selector:\n    app.kubernetes.io/name: traefik\n  ports:\n    - name: web\n      port: 80\n      targetPort: web\n    - name: websecure\n      port: 443\n      targetPort: websecure\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#routing-configuration","title":"Routing Configuration","text":""},{"location":"platform-components/ingress-load-balancing/#ingressroute-resources","title":"IngressRoute Resources","text":"<p>Traefik uses IngressRoute CRDs for advanced routing configuration:</p> <pre><code># Example application routing\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: echo-service\n  namespace: example-services\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`echo.webgrip.example`)\n      kind: Rule\n      services:\n        - name: echo-service\n          port: 80\n      middlewares:\n        - name: default-headers\n          namespace: ingress-traefik\n        - name: rate-limit\n          namespace: ingress-traefik\n  tls:\n    secretName: echo-tls-cert\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#routing-rules","title":"Routing Rules","text":"<p>Match Expressions: <pre><code># Host-based routing\nmatch: Host(`api.example.com`)\n\n# Path-based routing  \nmatch: Host(`example.com`) &amp;&amp; Path(`/api`)\n\n# Header-based routing\nmatch: Header(`Authorization`, `Bearer *`)\n\n# Method-based routing\nmatch: Method(`POST`) &amp;&amp; Path(`/webhook`)\n\n# Complex routing\nmatch: Host(`api.example.com`) &amp;&amp; (Path(`/v1`) || Path(`/v2`))\n</code></pre></p> <p>Priority Handling: Routes are evaluated by priority (higher numbers first): <pre><code>routes:\n  - match: Host(`api.example.com`) &amp;&amp; Path(`/health`)\n    priority: 100  # Specific route - higher priority\n    services:\n      - name: health-service\n        port: 8080\n\n  - match: Host(`api.example.com`)  \n    priority: 10   # General route - lower priority\n    services:\n      - name: api-service\n        port: 8080\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#middleware","title":"Middleware","text":""},{"location":"platform-components/ingress-load-balancing/#custom-middleware","title":"Custom Middleware","text":"<p>Configuration: <code>ops/helm/030-ingress-controllers/ingress-traefik-custom-middlewares/</code></p> <p>Custom middleware provides platform-wide functionality:</p>"},{"location":"platform-components/ingress-load-balancing/#default-headers-middleware","title":"Default Headers Middleware","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: default-headers\n  namespace: ingress-traefik\nspec:\n  headers:\n    customRequestHeaders:\n      X-Forwarded-Proto: \"https\"\n    customResponseHeaders:\n      X-Frame-Options: \"SAMEORIGIN\"\n      X-Content-Type-Options: \"nosniff\"\n      X-XSS-Protection: \"1; mode=block\"\n      Referrer-Policy: \"strict-origin-when-cross-origin\"\n    contentSecurityPolicy: \"default-src 'self'\"\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#rate-limiting-middleware","title":"Rate Limiting Middleware","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: rate-limit\n  namespace: ingress-traefik\nspec:\n  rateLimit:\n    average: 100    # 100 requests per second\n    burst: 200      # Allow burst up to 200\n    period: 1m      # Time window\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#authentication-middleware","title":"Authentication Middleware","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: basic-auth\n  namespace: ingress-traefik\nspec:\n  basicAuth:\n    secret: auth-secret  # Contains username:password hash\n    realm: \"WebGrip Platform\"\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#middleware-chaining","title":"Middleware Chaining","text":"<p>Middleware can be chained for complex processing:</p> <pre><code># Apply multiple middleware in order\nmiddlewares:\n  - name: rate-limit           # Applied first\n    namespace: ingress-traefik\n  - name: basic-auth          # Applied second  \n    namespace: ingress-traefik\n  - name: default-headers     # Applied third\n    namespace: ingress-traefik\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#tls-and-certificate-management","title":"TLS and Certificate Management","text":""},{"location":"platform-components/ingress-load-balancing/#integration-with-cert-manager","title":"Integration with cert-manager","text":"<p>Certificate Automation: Traefik integrates with cert-manager for automatic certificate provisioning.</p> <pre><code># Automatic certificate provisioning\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: secure-app\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`app.example.com`)\n      kind: Rule\n      services:\n        - name: app-service\n          port: 80\n  tls:\n    # cert-manager will automatically create this secret\n    secretName: app-tls-cert\n    # Specify the certificate issuer\n    certResolver: letsencrypt-prod\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#tls-configuration","title":"TLS Configuration","text":"<p>TLS Options: <pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: TLSOption\nmetadata:\n  name: default\n  namespace: ingress-traefik\nspec:\n  minVersion: \"VersionTLS12\"\n  maxVersion: \"VersionTLS13\"\n  cipherSuites:\n    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n  curvePreferences:\n    - secp521r1\n    - secp384r1\n  sniStrict: true\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#load-balancing","title":"Load Balancing","text":""},{"location":"platform-components/ingress-load-balancing/#load-balancing-algorithms","title":"Load Balancing Algorithms","text":"<p>Available Algorithms: - Round Robin (default): Distributes requests evenly - Least Connections: Routes to backend with fewest active connections - Weighted Round Robin: Assigns different weights to backends - IP Hash: Routes based on client IP for session persistence</p> <pre><code># Example weighted load balancing\nservices:\n  - name: app-v1\n    port: 80\n    weight: 80    # 80% of traffic\n  - name: app-v2  \n    port: 80\n    weight: 20    # 20% of traffic (canary)\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#health-checks","title":"Health Checks","text":"<p>Backend Health Monitoring: <pre><code># Health check configuration\nservices:\n  - name: app-service\n    port: 80\n    healthCheck:\n      path: /health\n      interval: 30s\n      timeout: 5s\n      retries: 3\n</code></pre></p> <p>Health Check Behavior: - Healthy: Backend receives traffic - Unhealthy: Backend removed from load balancing rotation - Recovery: Automatic re-inclusion when health checks pass</p>"},{"location":"platform-components/ingress-load-balancing/#observability","title":"Observability","text":""},{"location":"platform-components/ingress-load-balancing/#metrics-collection","title":"Metrics Collection","text":"<p>Prometheus Integration: Traefik exposes metrics for Prometheus collection</p> <p>Key Metrics Available: | Metric | Description | Use Case | |--------|-------------|----------| | <code>traefik_service_requests_total</code> | Total requests per service | Traffic volume analysis | | <code>traefik_service_request_duration_seconds</code> | Request duration histogram | Latency monitoring | | <code>traefik_service_retries_total</code> | Backend retry attempts | Reliability monitoring | | <code>traefik_entrypoint_requests_total</code> | Requests per entrypoint | Entry point analysis | | <code>traefik_config_reloads_total</code> | Configuration reload count | Configuration stability |</p>"},{"location":"platform-components/ingress-load-balancing/#dashboard-access","title":"Dashboard Access","text":"<p>Traefik Dashboard: <code>make view-traefik</code></p> <p>The dashboard provides: - Real-time Traffic: Current request flow and routing - Service Health: Backend service status and health checks - Route Configuration: Active routes and middleware chains - Metrics Overview: Request rates, response times, and error rates</p> <p>Dashboard Features: <pre><code># Access dashboard locally\nkubectl port-forward -n ingress-traefik svc/traefik-dashboard 9000:9000\n\n# Dashboard available at: http://localhost:9000\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#access-logging","title":"Access Logging","text":"<p>Log Format: JSON structured logging for easy parsing</p> <pre><code>{\n  \"time\": \"2024-01-15T10:30:00Z\",\n  \"level\": \"info\", \n  \"message\": \"access\",\n  \"downstream_remote_addr\": \"192.168.1.100\",\n  \"request_method\": \"GET\",\n  \"request_uri\": \"/api/users\",\n  \"request_protocol\": \"HTTP/2.0\",\n  \"request_host\": \"api.example.com\",\n  \"response_status\": 200,\n  \"response_size\": 1024,\n  \"duration\": 45,\n  \"upstream_addr\": \"10.244.1.50:8080\"\n}\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#performance-optimization","title":"Performance Optimization","text":""},{"location":"platform-components/ingress-load-balancing/#connection-management","title":"Connection Management","text":"<p>Connection Pooling: <pre><code># Optimize backend connections\nservices:\n  - name: app-service\n    port: 80\n    passHostHeader: true\n    responseForwarding:\n      flushInterval: 100ms\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#caching","title":"Caching","text":"<p>Response Caching: Configure caching middleware for static content</p> <pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: cache-control\nspec:\n  headers:\n    customResponseHeaders:\n      Cache-Control: \"public, max-age=3600\"  # 1 hour cache\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#compression","title":"Compression","text":"<p>Automatic Compression: Enable gzip compression for responses</p> <pre><code># Enable compression middleware\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: compression\nspec:\n  compress: {}  # Enable with default settings\n</code></pre>"},{"location":"platform-components/ingress-load-balancing/#high-availability","title":"High Availability","text":""},{"location":"platform-components/ingress-load-balancing/#deployment-strategy","title":"Deployment Strategy","text":"<p>Multi-Replica Deployment: <pre><code>deployment:\n  replicas: 2  # Minimum 2 replicas for HA\n\n# Pod anti-affinity for node distribution\naffinity:\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchExpressions:\n          - key: app.kubernetes.io/name\n            operator: In\n            values:\n            - traefik\n        topologyKey: kubernetes.io/hostname\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#circuit-breaker","title":"Circuit Breaker","text":"<p>Automatic Failure Handling: <pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: circuit-breaker\nspec:\n  circuitBreaker:\n    expression: \"NetworkErrorRatio() &gt; 0.3 || ResponseCodeRatio(500, 600, 0, 600) &gt; 0.3\"\n    checkPeriod: 3s\n    fallbackDuration: 10s\n    recoveryDuration: 10s\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"platform-components/ingress-load-balancing/#common-issues","title":"Common Issues","text":"<p>1. Service Not Accessible <pre><code># Check IngressRoute status\nkubectl get ingressroute -A\n\n# Verify service endpoints\nkubectl get endpoints -n &lt;namespace&gt; &lt;service-name&gt;\n\n# Check Traefik logs\nkubectl logs -n ingress-traefik deployment/traefik\n</code></pre></p> <p>2. Certificate Issues <pre><code># Check certificate status\nkubectl get certificates -A\n\n# Check cert-manager logs\nkubectl logs -n cert-manager deployment/cert-manager\n\n# Verify TLS secret\nkubectl get secret -n &lt;namespace&gt; &lt;tls-secret-name&gt;\n</code></pre></p> <p>3. Routing Problems <pre><code># Check route configuration\nkubectl describe ingressroute -n &lt;namespace&gt; &lt;route-name&gt;\n\n# View Traefik configuration\ncurl http://localhost:9000/api/http/routers\n\n# Check middleware configuration\nkubectl get middleware -A\n</code></pre></p>"},{"location":"platform-components/ingress-load-balancing/#debugging-tools","title":"Debugging Tools","text":"<p>Built-in Tools: - API Explorer: Access Traefik API for configuration inspection - Debug Logging: Enable debug mode for detailed request tracing - Metrics Endpoint: Prometheus metrics for performance analysis</p> <p>External Tools: - curl: Test routing and headers - kubectl: Kubernetes resource inspection - Prometheus: Metrics collection and alerting</p>"},{"location":"platform-components/ingress-load-balancing/#next-steps","title":"Next Steps","text":"<p>Explore related platform components:</p> <ul> <li>\ud83d\udd12 Certificate Management<p>Learn about automatic TLS certificate provisioning with cert-manager</p> </li> </ul> <ul> <li>\ud83d\udcca Monitoring &amp; Observability<p>Understand metrics collection, dashboards, and alerting</p> </li> </ul> <ul> <li>\ud83c\udf10 Network Architecture<p>Review the complete network architecture and traffic flow</p> </li> </ul> <ul> <li>\ud83d\udee1\ufe0f Security Model<p>Understand security controls and access management</p> </li> </ul> <p>\u26a1 Performance Tuning: Traefik configuration changes can significantly impact performance. Test changes in staging and monitor metrics before applying to production.</p>"},{"location":"service-catalog/backstage-integration/","title":"Backstage Integration","text":"<p>The WebGrip platform leverages Backstage as the central service catalog and developer portal, providing a unified view of all services, APIs, teams, and infrastructure components across the organization.</p>"},{"location":"service-catalog/backstage-integration/#backstage-overview","title":"Backstage Overview","text":"<p>Technology: Backstage (Open Source Developer Portal) Entity Definitions: <code>catalog/</code> TechDocs Integration: <code>backstage.io/techdocs-ref: dir:./docs/techdocs</code></p> <p>Backstage serves as the organizational brain of the platform, providing:</p> <ul> <li>\ud83d\udccb Service Catalog: Centralized inventory of all software components</li> <li>\ud83d\udc65 Team Directory: Organization structure and ownership mapping  </li> <li>\ud83d\udcda Documentation Hub: Integrated TechDocs and API documentation</li> <li>\ud83d\udd0d Service Discovery: Find services, APIs, and their relationships</li> <li>\ud83d\udcca Platform Overview: Unified view of the entire software ecosystem</li> </ul>"},{"location":"service-catalog/backstage-integration/#architecture","title":"Architecture","text":""},{"location":"service-catalog/backstage-integration/#backstage-entity-model","title":"Backstage Entity Model","text":""},{"location":"service-catalog/backstage-integration/#platform-integration","title":"Platform Integration","text":""},{"location":"service-catalog/backstage-integration/#entity-definitions","title":"Entity Definitions","text":""},{"location":"service-catalog/backstage-integration/#organization-structure","title":"Organization Structure","text":"<p>Location: <code>catalog-info.yaml</code></p> <p>The catalog-info.yaml file serves as the entry point for Backstage discovery:</p> <pre><code># Main catalog locations\napiVersion: backstage.io/v1alpha1\nkind: Location\nmetadata:\n  name: webgrip-domains\n  namespace: webgrip\n  description: A collection of all the domains within the WebGrip organisation\nspec:\n  targets:\n    - ./catalog/domains/operations-domain.yaml\n    - ./catalog/domains/telemetry-domain.yaml\n</code></pre> <p>Entity Categories: - Domains: <code>catalog/domains/</code> - Business domain boundaries - Systems: <code>catalog/systems/</code> - Technical system groupings - Components: <code>catalog/components/</code> - Individual services and applications - Groups: <code>catalog/groups/</code> - Team and organizational structure - Resources: <code>catalog/resources/</code> - Infrastructure resources</p>"},{"location":"service-catalog/backstage-integration/#domain-definitions","title":"Domain Definitions","text":"<p>Purpose: Define business domain boundaries and ownership</p> <p>Example: <code>catalog/domains/operations-domain.yaml</code></p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Domain\nmetadata:\n  name: operations-domain\n  namespace: webgrip\n  title: Operations\n  description: |\n    The operations domain is responsible for all things having to do with operations\n  labels:\n    tier: \"2\"\n  annotations:\n    github.com/project-slug: webgrip/operations-domain\n    backstage.io/techdocs-ref: dir:.\n    simpleicons.org/icon-slug: rotaryinternational\n  tags:\n    - operations\n    - infrastructure\n  links:\n    - url: http://example.com/domain/operations/\n      title: Readme\n      icon: book\n      type: website\nspec:\n  owner: group:infrastructure\n  type: product-area\n</code></pre> <p>Domain Structure: | Domain | Purpose | Owner | Components | |--------|---------|-------|------------| | Operations | Infrastructure &amp; platform operations | Infrastructure Team | Kubernetes, Ingress, Monitoring | | Telemetry | Observability &amp; monitoring | Platform Team | Grafana, Prometheus, Alerting |</p>"},{"location":"service-catalog/backstage-integration/#system-definitions","title":"System Definitions","text":"<p>Purpose: Group related components into logical technical systems</p> <p>Example: <code>catalog/systems/kubernetes.yaml</code></p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: System\nmetadata:\n  name: kubernetes-system\n  namespace: webgrip\n  title: Kubernetes\n  description: |\n    Kubernetes is an open-source container-orchestration system for automating \n    application deployment, scaling, and management.\nspec:\n  owner: group:webgrip/infrastructure\n  domain: webgrip/operations-domain\n</code></pre> <p>System Hierarchy:</p> <p></p>"},{"location":"service-catalog/backstage-integration/#component-definitions","title":"Component Definitions","text":"<p>Purpose: Catalog individual services, applications, and platform components</p> <p>Example: <code>catalog/components/ingress-nginx.yaml</code></p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: ingress-nginx-component\n  namespace: webgrip\n  title: Ingress Nginx\n  description: |\n    Ingress Nginx is an Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer.\n  labels:\n    tier: \"2\"\n  annotations:\n    backstage.io/adr-location: docs/adr\n    backstage.io/kubernetes-label-selector: \"app.kubernetes.io/instance=ingress-nginx\"\n    backstage.io/kubernetes-namespace: ingress-nginx\n    backstage.io/techdocs-ref: dir:.\n    github.com/project-slug: kubernetes/ingress-nginx\n    simpleicons.org/icon-slug: nginx\nspec:\n  type: service\n  owner: group:webgrip/infrastructure\n  lifecycle: experimental\n  system: kubernetes-system\n  dependsOn:\n    - resource:webgrip/staging-doks-cluster\n</code></pre> <p>Component Types: - service: Running applications and platform services - library: Shared code libraries and packages - website: Static websites and documentation sites</p> <p>Lifecycle Stages: - experimental: Early development and testing - production: Stable, production-ready services - deprecated: Services being phased out</p>"},{"location":"service-catalog/backstage-integration/#group-definitions","title":"Group Definitions","text":"<p>Purpose: Define team structure and ownership hierarchy</p> <p>Example: <code>catalog/groups/c-level-group.yaml</code></p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Group\nmetadata:\n  name: c-level-group\n  namespace: webgrip\n  title: C-Level\n  description: The C-Level group is responsible for the overall strategy and direction of the company.\n  labels:\n    tier: \"1\"\n  annotations:\n    github.com/project-slug: webgrip/organisation-public\n    simpleicons.org/icon-slug: protodotio\nspec:\n  type: department\n  profile:\n    displayName: C-Level\n    email: ryan@webgrip.nl\n    picture: https://api.dicebear.com/7.x/identicon/svg?seed=Fluffy&amp;backgroundColor=ffdfbf\n  children: ['group:webgrip/infrastructure']\n  members: ['Ryangr0']\n</code></pre> <p>Organizational Hierarchy:</p> <p></p>"},{"location":"service-catalog/backstage-integration/#resource-definitions","title":"Resource Definitions","text":"<p>Purpose: Catalog infrastructure resources and external dependencies</p> <p>Example: <code>catalog/resources/staging-doks-cluster.yaml</code></p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Resource\nmetadata:\n  name: staging-doks-cluster\n  namespace: webgrip\n  title: Staging DOKS Cluster\n  description: DigitalOcean Kubernetes cluster for staging workloads\nspec:\n  type: kubernetes-cluster\n  owner: group:webgrip/infrastructure\n  environment: staging\n</code></pre> <p>Resource Types: - kubernetes-cluster: Kubernetes clusters and environments - database: Database instances and services - queue: Message queues and event systems - storage: File systems and object storage</p>"},{"location":"service-catalog/backstage-integration/#annotations-and-integrations","title":"Annotations and Integrations","text":""},{"location":"service-catalog/backstage-integration/#key-annotations","title":"Key Annotations","text":"<p>Backstage entities use annotations to integrate with external systems:</p> Annotation Purpose Example <code>github.com/project-slug</code> Link to GitHub repository <code>webgrip/organisation-public</code> <code>backstage.io/techdocs-ref</code> TechDocs source location <code>dir:./docs/techdocs</code> <code>backstage.io/kubernetes-label-selector</code> Kubernetes resource selector <code>app.kubernetes.io/instance=traefik</code> <code>backstage.io/kubernetes-namespace</code> Kubernetes namespace <code>ingress-traefik</code> <code>simpleicons.org/icon-slug</code> Display icon <code>kubernetes</code>"},{"location":"service-catalog/backstage-integration/#techdocs-integration","title":"TechDocs Integration","text":"<p>This Repository: <code>catalog-info.yaml</code></p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: organisation-public\n  namespace: webgrip\n  annotations:\n    backstage.io/techdocs-ref: dir:./docs/techdocs\nspec:\n  type: platform\n  owner: group:webgrip/infrastructure\n</code></pre> <p>TechDocs Features: - Automatic Publishing: Docs published on every commit to main branch - Search Integration: Full-text search across all documentation - Version Control: Documentation versioned with code - Navigation: Integrated navigation within Backstage interface</p>"},{"location":"service-catalog/backstage-integration/#kubernetes-integration","title":"Kubernetes Integration","text":"<p>Components can be linked to Kubernetes resources for real-time status:</p> <pre><code>annotations:\n  backstage.io/kubernetes-label-selector: \"app.kubernetes.io/name=traefik\"\n  backstage.io/kubernetes-namespace: ingress-traefik\n</code></pre> <p>This enables: - Real-time Status: Pod health and deployment status - Resource Metrics: CPU, memory, and network usage - Log Access: Direct access to container logs - Scaling Controls: Scale deployments from Backstage interface</p>"},{"location":"service-catalog/backstage-integration/#service-discovery","title":"Service Discovery","text":""},{"location":"service-catalog/backstage-integration/#catalog-navigation","title":"Catalog Navigation","text":"<p>Entity Relationships: Backstage automatically maps relationships between entities:</p> <p></p>"},{"location":"service-catalog/backstage-integration/#search-and-discovery","title":"Search and Discovery","text":"<p>Search Capabilities: - Full-text Search: Search across names, descriptions, and documentation - Tag-based Filtering: Filter by technology, team, or environment - Owner-based Views: See all components owned by a specific team - Dependency Mapping: Understand component dependencies and impacts</p> <p>Common Search Patterns: <pre><code># Find all infrastructure components\ntag:infrastructure\n\n# Find components owned by infrastructure team\nowner:group:infrastructure\n\n# Find experimental services\nlifecycle:experimental\n\n# Find components in specific domain\ndomain:operations-domain\n</code></pre></p>"},{"location":"service-catalog/backstage-integration/#ownership-and-governance","title":"Ownership and Governance","text":""},{"location":"service-catalog/backstage-integration/#ownership-model","title":"Ownership Model","text":"<p>Ownership Hierarchy:</p> <p></p> <p>Owner Types: - group:webgrip/infrastructure: Platform and infrastructure components - group:webgrip/security: Security-related components and policies - group:webgrip/c-level: Strategic and organizational components</p>"},{"location":"service-catalog/backstage-integration/#component-lifecycle","title":"Component Lifecycle","text":"<p>Lifecycle Management:</p> <p></p>"},{"location":"service-catalog/backstage-integration/#platform-components-catalog","title":"Platform Components Catalog","text":""},{"location":"service-catalog/backstage-integration/#current-component-inventory","title":"Current Component Inventory","text":"Component Type Owner System Status Ingress Nginx service infrastructure kubernetes-system experimental cert-manager service infrastructure kubernetes-system production Echo Service service infrastructure kubernetes-system experimental Quote Service service infrastructure kubernetes-system experimental Metrics Server service infrastructure kubernetes-system production"},{"location":"service-catalog/backstage-integration/#component-dependencies","title":"Component Dependencies","text":""},{"location":"service-catalog/backstage-integration/#best-practices","title":"Best Practices","text":""},{"location":"service-catalog/backstage-integration/#entity-definition-guidelines","title":"Entity Definition Guidelines","text":"<p>1. Descriptive Metadata: <pre><code>metadata:\n  title: \"Human-readable title\"\n  description: |\n    Multi-line description explaining:\n    - Purpose and functionality\n    - Key features\n    - Integration points\n</code></pre></p> <p>2. Comprehensive Annotations: <pre><code>annotations:\n  github.com/project-slug: \"owner/repository\"\n  backstage.io/techdocs-ref: \"dir:./docs\"\n  backstage.io/kubernetes-namespace: \"namespace\"\n</code></pre></p> <p>3. Clear Ownership: <pre><code>spec:\n  owner: \"group:webgrip/team-name\"  # Always use group references\n  lifecycle: \"production|experimental|deprecated\"\n</code></pre></p> <p>4. Relationship Mapping: <pre><code>spec:\n  system: \"parent-system\"\n  dependsOn:\n    - \"component:other-service\"\n    - \"resource:database\"\n</code></pre></p>"},{"location":"service-catalog/backstage-integration/#maintenance-guidelines","title":"Maintenance Guidelines","text":"<p>Regular Updates: - Quarterly Review: Verify entity accuracy and relationships - Lifecycle Updates: Promote experimental to production, mark deprecated - Ownership Changes: Update owners when teams reorganize - Link Validation: Ensure all external links remain valid</p> <p>Documentation Standards: - TechDocs: Every component should have linked documentation - API Docs: Services should include OpenAPI specifications - Runbooks: Operational procedures documented and linked</p>"},{"location":"service-catalog/backstage-integration/#next-steps","title":"Next Steps","text":"<p>Explore related service catalog topics:</p> <ul> <li>\ud83c\udfd7\ufe0f Domains &amp; Systems<p>Understand domain boundaries and system organization</p> </li> </ul> <ul> <li>\ud83d\udccb Component Registry<p>Explore individual service and component details</p> </li> </ul> <ul> <li>\ud83d\udd0c API Contracts<p>Review API documentation and service contracts</p> </li> </ul> <ul> <li>\ud83d\udc65 Team Structure<p>Learn about team organization and responsibilities</p> </li> </ul> <p>\ud83d\udccb Catalog Maintenance: Entity definitions should be updated whenever component ownership, lifecycle, or dependencies change. See Operational Standards for maintenance procedures.</p>"}]}