namespace: grafana-stack

alloy:
  alloy:
    mounts:
      varlog: true
      dockercontainers: true
    stabilityLevel: "experimental"
    configMap:
      create: true
      content: |-
        otelcol.receiver.otlp "otlp" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }
          http {
            endpoint = "0.0.0.0:4318"
          }
          output {
            logs    = [otelcol.processor.batch.main.logs]
            metrics = [otelcol.processor.batch.main.metrics]
            traces  = [otelcol.processor.batch.main.traces]
          }
        }

        otelcol.receiver.filelog "k8slogs" {
          include  = ["/var/log/containers/*.log"]
          start_at = "beginning"
          operators {
            json_parser {
              parse_to       = "body"
              timestamp_from = "body.time"
            }
          }
          output {
            logs = [otelcol.processor.k8sattributes.k8sattrs.logs]
          }
        }

        discovery.kubernetes "cluster_sd" {
          output = ["prometheus.scrape.scraper.input"]
        }

        prometheus.scrape "scraper" {
          forward_to    = [otelcol.processor.batch.main.metrics]
          wal_directory = "/tmp/agent/wal_prometheus"
        }

        otelcol.processor.k8sattributes "k8sattrs" {
          auth_type = "serviceAccount"
          extract {
            container = "container_name"
            namespace = "namespace_name"
            pod       = "pod_name"
          }
          output {
            logs = [otelcol.processor.memory_limiter.limiter.logs]
          }
        }

        otelcol.processor.memory_limiter "limiter" {
          check_interval         = "1s"
          limit_percentage       = 70
          spike_limit_percentage = 20
          output {
            logs    = [otelcol.processor.batch.main.logs]
            metrics = [otelcol.processor.batch.main.metrics]
            traces  = [otelcol.processor.batch.main.traces]
          }
        }

        otelcol.processor.batch "main" {
          send_batch_size     = 1024
          send_batch_max_size = 2048
          timeout             = "10s"
          output {
            logs    = [loki.write.incluster]
            metrics = [prometheus.remote_write.incluster]
            traces  = [otelcol.exporter.otlp.tempo]
          }
        }

        loki.write "incluster" {
          endpoint {
            url = "http://loki.grafana-stack.svc.cluster.local:3100/loki/api/v1/push"
          }
        }

        otelcol.exporter.otlp "tempo" {
          client {
            endpoint = "tempo.grafana-stack.svc.cluster.local:4317"
            tls {
              insecure = true
            }
          }
        }

        prometheus.remote_write "incluster" {
          endpoint {
            url = "http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc.cluster.local:9090/api/v1/write"
          }
        }

    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m

  controller:
    type: daemonset

  configReloader:
    enabled: true

  service:
    enabled: true
    type: ClusterIP
