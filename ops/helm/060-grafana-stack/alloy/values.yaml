namespace: grafana-stack

alloy:
  alloy:
    mounts:
      varlog: true
      dockercontainers: true
    stabilityLevel: "experimental"
    extraPorts:
      - name: "http"
        port: 4318
        targetPort: 4318
        protocol: "TCP"
      - name: "grpc"
        port: 4317
        targetPort: 4317
        protocol: "TCP"
    configMap:
      create: true
      content: |-
        otelcol.receiver.otlp "default" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }

          http {
            endpoint = "0.0.0.0:4318"
          }

          output {
            metrics = [otelcol.exporter.prometheus.default.input]
            logs    = [otelcol.exporter.loki.default.input]
            traces  = [otelcol.exporter.otlp.tempo.input]
          }
        }

        discovery.kubernetes "pod" {
          role = "pod"
        }

        discovery.relabel "pod_logs" {
          targets = discovery.kubernetes.pod.targets

          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            action = "replace"
            target_label = "namespace"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            action = "replace"
            target_label = "pod"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "container"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
            action = "replace"
            target_label = "app"
          }

          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "job"
            separator = "/"
            replacement = "$1"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "__path__"
            separator = "/"
            replacement = "/var/log/pods/*$1/*.log"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_container_id"]
            action = "replace"
            target_label = "container_runtime"
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
          }
        }

        loki.source.kubernetes "pod_logs" {
          targets    = discovery.relabel.pod_logs.output
          forward_to = [loki.process.pod_logs.receiver]
        }

        loki.process "pod_logs" {
          stage.static_labels {
              values = {
                cluster = "do-ams3-webgrip-staging-cluster",
              }
          }

          forward_to = [loki.write.incluster.receiver]
        }

        otelcol.exporter.prometheus "default" {
          forward_to = [prometheus.remote_write.incluster.receiver]
        }

        otelcol.exporter.loki "default" {
          forward_to = [loki.write.incluster.receiver]
        }

        otelcol.exporter.otlp "tempo" {
          client {
            endpoint = "tempo.grafana-stack.svc.cluster.local:4317"
            tls {
              insecure = true
              insecure_skip_verify = true
            }
          }
        }

        prometheus.remote_write "incluster" {
          endpoint {
            url = "http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc.cluster.local:9090/api/v1/write"
          }
        }

        loki.write "incluster" {
          endpoint {
            url = "loki.grafana-stack.svc.cluster.local:3100"
          }
        }


    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m

  controller:
    type: daemonset

  configReloader:
    enabled: true

  service:
    enabled: true
    type: ClusterIP
