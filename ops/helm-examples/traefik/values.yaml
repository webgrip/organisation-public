# Number of Traefik replicas for high availability
replicaCount: 3

# Image configuration
image:
  repository: traefik
  tag: "v3.2.1"
  pullPolicy: IfNotPresent

# Deployment strategy
deployment:
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Persistent volume configuration
persistence:
  enabled: true
  storageClass: "gp2"  # Update if different
  accessMode: ReadWriteOnce
  size: 128Mi

# Ingress configuration
entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
  websecure:
    address: ":443"
    http:
      tls:
        certResolver: le
        domains:
          - main: "traefik.example.com"
            sans:
              - "*.traefik.example.com"

# Certificate resolver configuration
certificatesResolvers:
  le:
    acme:
      email: ryan@webgrip.nl
      storage: /data/acme.json
      httpChallenge:
        entryPoint: web


# TLS configuration
tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      sniStrict: true


# Middleware csp
middlewares:
  secure-headers:
    headers:
      frameDeny: true
      sslRedirect: true
      contentTypeNosniff: true
      browserXssFilter: true
      stsSeconds: 31536000
      stsIncludeSubdomains: true
      stsPreload: true
      contentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline';"
      xssProtection: "1; mode=block"

# Enable Prometheus metrics
metrics:
  enabled: true
  prometheus:
    enabled: true
    entryPoint: metrics

# Enable access logs
accessLog:
  enabled: true
  format: json
  fields:
    defaultMode: keep
    headers:
      defaultMode: drop

# Service configuration
service:
  type: LoadBalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  loadBalancerSourceRanges:
    - 10.0.0.0/8  # Internal IP range for security

# Ingress Controller configuration
additionalArguments:
  - "--log.level=INFO"
  - "--accesslog"
  - "--api.insecure=false"
  - "--api.dashboard=true"
  - "--metrics.prometheus=true"
  - "--providers.kubernetescrd"


# Enable the Kubernetes CRD provider
providers:
  kubernetesCRD:
    enabled: true

# Configure the dashboard
dashboard:
  enabled: true
  domain: traefik.example.com
  ingressRoute:
    annotations:
      kubernetes.io/ingress.class: traefik
    tls:
      enabled: true
      certResolver: default


service:
  type: LoadBalancer
  port: 80
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8080"
  labels: {}

ingress:
  enabled: true
  ingressClassName: "traefik"
  annotations: {}
  hosts:
    - host: traefik.webgrip.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: traefik
              port:
                number: 80
  tls: []

logs:
  accessLogs: true
  generalLogs: true


resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 256Mi

env:
  TRAEFIK_PING: "true"

# Node affinity and tolerations for scheduling
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - traefik
        topologyKey: "kubernetes.io/hostname"

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"


# Security context
securityContext:
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532

# Pod annotations (e.g., for Prometheus scraping)
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8082"
