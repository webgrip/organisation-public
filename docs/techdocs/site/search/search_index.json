{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebGrip Organisation Public","text":"<p>Welcome to the complete knowledge base for the WebGrip Organisation Public Repository. This site provides an end-to-end map of our platform infrastructure, operational procedures, and development workflows.</p>"},{"location":"#what-is-this-repository","title":"What is This Repository?","text":"<p>The WebGrip Organisation Public Repository serves as the foundational platform infrastructure for the WebGrip organisation. It contains:</p> <ul> <li>Base organizational structure with domains, groups, and users</li> <li>Kubernetes platform components for container orchestration  </li> <li>Infrastructure tooling for deployment, monitoring, and operations</li> <li>CI/CD workflows for automated deployment and testing</li> <li>Backstage catalog entities for service discovery and documentation</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":""},{"location":"#platform-architecture","title":"\ud83c\udfd7\ufe0f Platform Architecture","text":"<p>Understand our Kubernetes-based infrastructure, networking, and core platform components.</p>"},{"location":"#operations","title":"\u2699\ufe0f Operations","text":"<p>Learn about CI/CD workflows, deployment procedures, secrets management, and operational tools.</p>"},{"location":"#catalog-structure","title":"\ud83d\udccb Catalog Structure","text":"<p>Explore our Backstage catalog with domains, systems, components, and resources.</p>"},{"location":"#development","title":"\ud83d\udee0\ufe0f Development","text":"<p>Get started with local development, contribution guidelines, and testing procedures.</p>"},{"location":"#adrs","title":"\ud83d\udcda ADRs","text":"<p>Review architectural decisions that shape our platform design and implementation.</p>"},{"location":"#key-technologies","title":"Key Technologies","text":"<ul> <li>Container Orchestration: Kubernetes with DOKS (DigitalOcean Kubernetes Service)</li> <li>Ingress Controller: Traefik v3.3.4 for traffic routing and load balancing</li> <li>CI/CD: GitHub Actions with self-hosted runners (ARC)</li> <li>Monitoring: Grafana stack with Prometheus for observability</li> <li>Secrets Management: Age + SOPS for encrypted configuration</li> <li>Service Catalog: Backstage for service discovery and documentation</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>New to the platform? Start with Getting Started</li> <li>Want to contribute? Check out Local Setup</li> <li>Need to deploy something? Review Deployment Guide</li> <li>Looking for a specific component? Browse the Catalog Structure</li> </ol> <p>Note: ADRs (Architectural Decision Records) are maintained in <code>/docs/adrs/</code> in the repository. The ADRs section provides links and context for these decisions.</p>"},{"location":"#support-contribution","title":"Support &amp; Contribution","text":"<ul> <li>Issues: Report problems via GitHub Issues</li> <li>Contributions: Follow our Contributing Guidelines</li> <li>Maintenance: See Maintenance Guide for keeping docs current</li> </ul>"},{"location":"adrs/all_decisions/","title":"All Decisions","text":"<p>This page provides a comprehensive index of all Architectural Decision Records (ADRs) in the WebGrip organisation.</p>"},{"location":"adrs/all_decisions/#adr-index","title":"ADR Index","text":""},{"location":"adrs/all_decisions/#template-standards","title":"Template &amp; Standards","text":"ADR Title Status Date Tags ADR-0000 Template Template - Template, Standards"},{"location":"adrs/all_decisions/#active-decisions","title":"Active Decisions","text":"<p>Current Status: Only the template ADR exists. Future architectural decisions will be documented here as they are made.</p>"},{"location":"adrs/all_decisions/#proposed-decisions","title":"Proposed Decisions","text":"<p>Note: No ADRs are currently in \"Proposed\" status. New proposals will appear here for review.</p>"},{"location":"adrs/all_decisions/#superseded-decisions","title":"Superseded Decisions","text":"<p>Note: No ADRs have been superseded yet. Historical decisions will be listed here when they are replaced.</p>"},{"location":"adrs/all_decisions/#rejected-decisions","title":"Rejected Decisions","text":"<p>Note: No ADRs have been rejected yet. Rejected alternatives will be documented here for reference.</p>"},{"location":"adrs/all_decisions/#adr-statistics","title":"ADR Statistics","text":"Status Count Template 1 Proposed 0 Accepted 0 Rejected 0 Deprecated 0 Superseded 0 Total 1"},{"location":"adrs/all_decisions/#expected-future-adrs","title":"Expected Future ADRs","text":"<p>Based on the platform architecture and technology choices observed in the repository, the following ADRs are likely needed:</p>"},{"location":"adrs/all_decisions/#infrastructure-decisions","title":"Infrastructure Decisions","text":"<p>ADR-0001: Kubernetes Platform Selection - Decision between EKS, DOKS, and other managed Kubernetes services - Rationale for multi-cloud approach (AWS + DigitalOcean) - Cost, performance, and operational considerations</p> <p>ADR-0002: Traefik vs. Nginx Ingress Controller - Evaluation of ingress controller options - Feature comparison and performance analysis - Integration with certificate management</p> <p>ADR-0003: Helm vs. Kustomize for Configuration Management - Infrastructure as Code approach selection - Template complexity vs. maintainability trade-offs - Secrets management integration</p>"},{"location":"adrs/all_decisions/#security-decisions","title":"Security Decisions","text":"<p>ADR-0004: Age + SOPS for Secrets Management - Comparison with HashiCorp Vault, Sealed Secrets, etc. - Operational complexity vs. security requirements - Integration with CI/CD pipelines</p> <p>ADR-0005: Certificate Management Strategy - Let's Encrypt vs. custom CA vs. external certificate providers - Automation requirements and certificate lifecycle - Compliance and security considerations</p>"},{"location":"adrs/all_decisions/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>ADR-0006: Grafana Stack Architecture - Monitoring platform selection and configuration - Prometheus vs. alternative metrics systems - Dashboard standardization and governance</p> <p>ADR-0007: Logging Strategy - Centralized logging vs. distributed logging - Log retention and compliance requirements - Integration with monitoring and alerting</p>"},{"location":"adrs/all_decisions/#cicd-decisions","title":"CI/CD Decisions","text":"<p>ADR-0008: GitHub Actions Runner Controller (ARC) - Self-hosted vs. GitHub-hosted runners - Cost optimization and security considerations - Scaling and performance requirements</p> <p>ADR-0009: GitOps vs. Push-based Deployment - Deployment strategy and automation approach - Security and audit trail requirements - Developer experience and operational complexity</p>"},{"location":"adrs/all_decisions/#adr-review-schedule","title":"ADR Review Schedule","text":""},{"location":"adrs/all_decisions/#quarterly-reviews","title":"Quarterly Reviews","text":"<p>Q1 Review (January-March): - Review all \"Accepted\" ADRs for continued relevance - Validate ongoing guardrails and monitoring - Update consequences and lessons learned</p> <p>Q2 Review (April-June): - Architecture evolution assessment - Technology landscape changes - Cross-ADR dependency analysis</p> <p>Q3 Review (July-September): - Performance and scalability validation - Security and compliance updates - Operational experience assessment</p> <p>Q4 Review (October-December): - Annual architecture health check - ADR process improvement - Strategic planning alignment</p>"},{"location":"adrs/all_decisions/#triggers-for-adr-updates","title":"Triggers for ADR Updates","text":"<p>Technology Updates: - Major version updates of core platform components - End-of-life announcements for current technologies - New technology adoption in the ecosystem</p> <p>Performance Issues: - SLA/SLO violations related to architectural decisions - Scalability bottlenecks requiring architectural changes - Cost optimization opportunities</p> <p>Security Changes: - New security threats or vulnerabilities - Compliance requirement changes - Security incident learnings</p> <p>Operational Changes: - Team structure or ownership changes - Process improvements or automation - Tool consolidation or standardization</p>"},{"location":"adrs/all_decisions/#adr-metrics-analytics","title":"ADR Metrics &amp; Analytics","text":""},{"location":"adrs/all_decisions/#decision-quality-metrics","title":"Decision Quality Metrics","text":"<p>Decision Success Rate: - Percentage of ADRs still valid after 1 year - Number of superseded vs. deprecated decisions - Implementation success rate</p> <p>Decision Impact: - Performance improvements from architectural decisions - Cost savings or increases from technology choices - Developer productivity impact</p> <p>Decision Speed: - Time from problem identification to ADR approval - Review cycle time for proposed ADRs - Implementation time from ADR approval</p>"},{"location":"adrs/all_decisions/#process-metrics","title":"Process Metrics","text":"<p>ADR Coverage: - Percentage of major architectural decisions documented - Cross-reference coverage between code and ADRs - Stakeholder participation in ADR reviews</p> <p>ADR Quality: - Completeness of ADR sections - Validation method effectiveness - Long-term accuracy of predictions</p>"},{"location":"adrs/all_decisions/#contributing-to-adrs","title":"Contributing to ADRs","text":""},{"location":"adrs/all_decisions/#creating-new-adrs","title":"Creating New ADRs","text":"<ol> <li>Copy Template: Start with ADR template</li> <li>Assign Number: Use next sequential number (ADR-NNNN)</li> <li>Complete Sections: Fill all required sections thoroughly</li> <li>Gather Input: Collect stakeholder feedback and review</li> <li>Submit PR: Create pull request with ADR for review</li> <li>Update Index: Add to this index upon approval</li> </ol>"},{"location":"adrs/all_decisions/#adr-review-process","title":"ADR Review Process","text":"<p>Technical Review: - Architecture team review for technical accuracy - Cross-team impact assessment - Performance and scalability validation</p> <p>Business Review: - Stakeholder alignment and business impact - Resource and timeline implications - Risk assessment and mitigation</p> <p>Final Approval: - Decision approval by designated authority - Status update to \"Accepted\" - Publication and communication</p>"},{"location":"adrs/all_decisions/#maintaining-existing-adrs","title":"Maintaining Existing ADRs","text":"<p>Regular Updates: - Quarterly review of validation methods - Update consequences based on real-world experience - Revision log updates for significant changes</p> <p>Status Changes: - Deprecation when decisions become obsolete - Supersession when new decisions replace old ones - Amendment for minor corrections or clarifications</p>"},{"location":"adrs/all_decisions/#search-and-discovery","title":"Search and Discovery","text":""},{"location":"adrs/all_decisions/#finding-relevant-adrs","title":"Finding Relevant ADRs","text":"<p>By Technology: - Search for specific technologies in ADR content - Filter by tags and categories - Cross-reference with component documentation</p> <p>By Domain: - Operations domain architectural decisions - Telemetry domain architectural decisions - Security and compliance decisions</p> <p>By Impact: - Performance-related decisions - Cost-related decisions - Security-related decisions</p>"},{"location":"adrs/all_decisions/#integration-points","title":"Integration Points","text":"<p>TechDocs Integration: - ADRs referenced from relevant documentation pages - Decision rationale included in implementation guides - Cross-links between ADRs and platform components</p> <p>Backstage Integration: - ADR annotations on relevant components - Service catalog links to architectural decisions - Decision history for each platform component</p> <p>Code Integration: - ADR references in code comments - Configuration files citing decision rationale - Architecture diagrams linked to decisions</p>"},{"location":"adrs/all_decisions/#next-steps","title":"Next Steps","text":"<ul> <li>Create First ADR: Document an architectural decision using the template</li> <li>Review Process: Understand ADR overview and creation process</li> <li>Platform Decisions: Review platform architecture for decision context</li> <li>Contributing: Follow contributing guidelines for ADR submissions</li> </ul>"},{"location":"adrs/overview/","title":"Overview","text":"<pre>Error : [Errno 2] No such file or directory: 'mmdc'</pre> <pre>Args : ['mmdc', '-p', '/tmp/tmp_uqq9750/puppeteer-config.json', '-o', '/tmp/tmp_uqq9750/out.svg']</pre> <pre>flowchart LR\n    Draft[Draft] --&gt; Proposed[Proposed]\n    Proposed --&gt; Accepted[Accepted]\n    Proposed --&gt; Rejected[Rejected]\n    Accepted --&gt; Deprecated[Deprecated]\n    Accepted --&gt; Superseded[Superseded by ADR-NN]\n\n    Draft -.-&gt;|Abandon| Rejected\n    Proposed -.-&gt;|New info| Draft\n</pre>"},{"location":"catalog/domains/","title":"Domains","text":"<pre>Error : [Errno 2] No such file or directory: 'mmdc'</pre> <pre>Args : ['mmdc', '-p', '/tmp/tmpsrr717tp/puppeteer-config.json', '-o', '/tmp/tmpsrr717tp/out.svg']</pre> <pre>flowchart TD\n    subgraph \"WebGrip Organisation\"\n        OD[Operations Domain]\n        TD[Telemetry Domain]\n    end\n\n    subgraph \"Operations Domain\"\n        OD --&gt; K8S[Kubernetes System]\n        OD --&gt; GHA[GitHub Actions System]\n    end\n\n    subgraph \"Telemetry Domain\" \n        TD --&gt; MON[Monitoring System]\n        TD --&gt; LOG[Logging System]\n    end\n\n    K8S --&gt; IC[Ingress Components]\n    K8S --&gt; CM[Cert Manager]\n    MON --&gt; GR[Grafana]\n    MON --&gt; PR[Prometheus]\n</pre>"},{"location":"operations/cicd_workflows/","title":"Macro Syntax Error","text":"<p>File: <code>operations/cicd_workflows.md</code></p> <p>Line 25 in Markdown file: expected token 'name', got '|' <pre><code>  source-dir: ${{ github.event.inputs.source-dir || 'docs/techdocs' }}\n</code></pre></p>"},{"location":"overview/getting_started/","title":"Getting Started","text":"<pre>Error : [Errno 2] No such file or directory: 'mmdc'</pre> <pre>Args : ['mmdc', '-p', '/tmp/tmpye4ld9l_/puppeteer-config.json', '-o', '/tmp/tmpye4ld9l_/out.svg']</pre> <pre>flowchart TD\n    A[Platform Foundation] --&gt; B[005-tainters]\n    A --&gt; C[007-cluster-monitoring] \n    A --&gt; D[010-cert-manager]\n    A --&gt; E[020-cluster-issuers]\n    A --&gt; F[030-ingress-controllers]\n    A --&gt; G[040-gha-runners-controller]\n    A --&gt; H[045-gha-runners]\n    A --&gt; I[060-grafana-stack]\n    A --&gt; J[950-example-services]\n\n    F --&gt; F1[ingress-traefik]\n    F --&gt; F2[ingress-traefik-custom-middlewares]\n\n    G --&gt; G1[gha-runner-scale-set-controller]\n    G --&gt; G2[gha-runner-scale-set-controller-podmonitor]\n</pre>"},{"location":"overview/project_overview/","title":"Project Overview","text":""},{"location":"overview/project_overview/#purpose-mission","title":"Purpose &amp; Mission","text":"<p>The WebGrip Organisation Public Repository serves as the foundational infrastructure platform for the WebGrip organisation. This repository provides the essential building blocks needed to establish and manage the complete organizational structure in a cloud-native environment.</p>"},{"location":"overview/project_overview/#core-responsibilities","title":"Core Responsibilities","text":""},{"location":"overview/project_overview/#organizational-foundation","title":"Organizational Foundation","text":"<ul> <li>Domain Structure: Defines business domains (operations, telemetry)</li> <li>System Architecture: Establishes core systems like Kubernetes</li> <li>Component Catalog: Manages platform components (ingress-nginx, cert-manager)</li> <li>Resource Management: Defines infrastructure resources (staging cluster)</li> </ul>"},{"location":"overview/project_overview/#platform-infrastructure","title":"Platform Infrastructure","text":"<ul> <li>Container Orchestration: Kubernetes cluster management and configuration</li> <li>Ingress &amp; Networking: Traefik-based traffic routing and load balancing</li> <li>Security &amp; Compliance: Certificate management and secrets encryption</li> <li>Monitoring &amp; Observability: Grafana dashboards and Prometheus metrics</li> </ul>"},{"location":"overview/project_overview/#operational-excellence","title":"Operational Excellence","text":"<ul> <li>CI/CD Automation: GitHub Actions workflows for deployment and testing</li> <li>Infrastructure as Code: Helm charts for consistent deployments</li> <li>Secrets Management: Age/SOPS encryption for secure configuration</li> <li>Development Tools: Local development setup and contribution workflows</li> </ul>"},{"location":"overview/project_overview/#repository-structure","title":"Repository Structure","text":"<p>Assumption: The repository structure follows platform engineering best practices with clear separation of concerns. Validation: Review Repository Structure for detailed breakdown.</p> <pre><code>organisation-public/\n\u251c\u2500\u2500 catalog/           # Backstage catalog entities\n\u2502   \u251c\u2500\u2500 domains/       # Business domain definitions\n\u2502   \u251c\u2500\u2500 systems/       # System architecture components  \n\u2502   \u251c\u2500\u2500 components/    # Individual service components\n\u2502   \u2514\u2500\u2500 resources/     # Infrastructure resources\n\u251c\u2500\u2500 ops/               # Operational tooling and configurations\n\u2502   \u251c\u2500\u2500 helm/          # Helm charts for deployments\n\u2502   \u2514\u2500\u2500 secrets/       # Encrypted configuration files\n\u251c\u2500\u2500 docs/              # Documentation and ADRs\n\u2502   \u251c\u2500\u2500 adrs/          # Architectural Decision Records\n\u2502   \u2514\u2500\u2500 techdocs/      # This documentation site\n\u2514\u2500\u2500 .github/           # CI/CD workflows and automation\n</code></pre>"},{"location":"overview/project_overview/#key-stakeholders","title":"Key Stakeholders","text":"<ul> <li>Infrastructure Team: Primary owners and maintainers</li> <li>Platform Engineers: Contributors and operators  </li> <li>Development Teams: Consumers of platform services</li> <li>Operations Team: Monitoring and incident response</li> </ul>"},{"location":"overview/project_overview/#success-metrics","title":"Success Metrics","text":"<p>The platform's effectiveness is measured by:</p> <ul> <li>Deployment Frequency: Time from commit to production deployment</li> <li>Mean Time to Recovery (MTTR): Speed of incident resolution</li> <li>Platform Adoption: Number of services using platform components  </li> <li>Developer Experience: Time to first successful deployment for new team members</li> </ul>"},{"location":"overview/project_overview/#related-resources","title":"Related Resources","text":"<ul> <li>Getting Started Guide - First steps for new users</li> <li>Repository Structure - Detailed file organization</li> <li>Platform Architecture - Technical infrastructure details</li> <li>Catalog Overview - Service catalog structure</li> </ul>"},{"location":"overview/project_overview/#links-to-source","title":"Links to Source","text":"<ul> <li>README.md - Repository introduction</li> <li>catalog-info.yaml - Backstage entity definitions</li> <li>Makefile - Common operational commands</li> </ul>"},{"location":"overview/repository_structure/","title":"Repository Structure","text":"<pre>Error : [Errno 2] No such file or directory: 'mmdc'</pre> <pre>Args : ['mmdc', '-p', '/tmp/tmpg5ur4k2b/puppeteer-config.json', '-o', '/tmp/tmpg5ur4k2b/out.svg']</pre> <pre>flowchart TD\n    A[Repository Root] --&gt; B[catalog/]\n    A --&gt; C[ops/helm/]\n    A --&gt; D[.github/workflows/]\n    A --&gt; E[docs/]\n\n    B --&gt; B1[Backstage Entities]\n    C --&gt; C1[Platform Components]\n    D --&gt; D1[CI/CD Automation]\n    E --&gt; E1[Documentation &amp; ADRs]\n\n    B1 --&gt; F[Service Discovery]\n    C1 --&gt; G[Infrastructure]\n    D1 --&gt; H[Deployment Pipeline]\n    E1 --&gt; I[Knowledge Base]\n\n    F --&gt; J[Platform Governance]\n    G --&gt; J\n    H --&gt; J  \n    I --&gt; J\n</pre>"},{"location":"platform/infrastructure_overview/","title":"Infrastructure Overview","text":"<pre>Error : [Errno 2] No such file or directory: 'mmdc'</pre> <pre>Args : ['mmdc', '-p', '/tmp/tmpfrd9v422/puppeteer-config.json', '-o', '/tmp/tmpfrd9v422/out.svg']</pre> <pre>flowchart TB\n    subgraph \"Cloud Infrastructure\"\n        AWS[AWS EKS ClusterProduction]\n        DO[DigitalOcean DOKSStaging]\n    end\n\n    subgraph \"Platform Components\"\n        Traefik[Traefik Ingressv3.3.4]\n        CertManager[Cert ManagerSSL/TLS]\n        Monitoring[Grafana + PrometheusObservability]\n        GHA[GitHub Actions RunnersCI/CD]\n    end\n\n    subgraph \"Application Layer\"\n        Echo[Echo ServiceExample]\n        Quote[Quote ServiceExample]\n        Custom[Custom Applications]\n    end\n\n    subgraph \"External Services\"\n        GitHub[GitHubSource Control]\n        Backstage[BackstageService Catalog]\n        Akeyless[AkeylessSecrets Management]\n    end\n\n    AWS --&gt; Traefik\n    DO --&gt; Traefik\n    Traefik --&gt; CertManager\n    Traefik --&gt; Echo\n    Traefik --&gt; Quote\n    Traefik --&gt; Custom\n\n    Monitoring --&gt; AWS\n    Monitoring --&gt; DO\n\n    GHA --&gt; GitHub\n    GitHub --&gt; Backstage\n    Akeyless --&gt; CertManager\n</pre>"},{"location":"reference/maintenance/","title":"Maintenance","text":"<p>This guide explains how to maintain and update the TechDocs site for the WebGrip Organisation Public repository.</p>"},{"location":"reference/maintenance/#techdocs-architecture","title":"TechDocs Architecture","text":""},{"location":"reference/maintenance/#site-structure","title":"Site Structure","text":"<p>The TechDocs site follows a platform-centric information architecture that reflects the repository's primary purpose as an organizational infrastructure foundation:</p> <pre><code>docs/techdocs/\n\u251c\u2500\u2500 mkdocs.yml           # Site configuration and navigation\n\u251c\u2500\u2500 docs/                # Documentation pages\n\u2502   \u251c\u2500\u2500 index.md        # Landing page\n\u2502   \u251c\u2500\u2500 overview/       # Project overview and getting started\n\u2502   \u251c\u2500\u2500 platform/       # Infrastructure and architecture\n\u2502   \u251c\u2500\u2500 operations/     # CI/CD, deployment, and tools\n\u2502   \u251c\u2500\u2500 catalog/        # Backstage catalog structure\n\u2502   \u251c\u2500\u2500 development/    # Local setup and contributing\n\u2502   \u251c\u2500\u2500 adrs/          # ADR integration and overview\n\u2502   \u2514\u2500\u2500 reference/     # Glossary, troubleshooting, maintenance\n\u2514\u2500\u2500 overrides/          # Theme customizations\n</code></pre>"},{"location":"reference/maintenance/#navigation-mapping","title":"Navigation Mapping","text":"<p>The navigation structure maps directly to repository seams and operational boundaries:</p> Section Repository Mapping Purpose Overview Root files, README Project introduction and getting started Platform Architecture <code>ops/helm/</code>, cluster configs Infrastructure components and dependencies Operations <code>.github/workflows/</code>, <code>Makefile</code> CI/CD workflows and operational procedures Catalog Structure <code>catalog/</code> directory Backstage entities and service discovery Development Contributing workflows Local setup and contribution guidelines ADRs <code>docs/adrs/</code> Architectural decisions and rationale Reference Cross-cutting concerns Glossary, troubleshooting, and maintenance"},{"location":"reference/maintenance/#content-maintenance","title":"Content Maintenance","text":""},{"location":"reference/maintenance/#adding-new-pages","title":"Adding New Pages","text":"<p>Within Existing Sections: 1. Create the new <code>.md</code> file in the appropriate directory 2. Add the page to <code>nav:</code> section in <code>mkdocs.yml</code> 3. Update cross-references from related pages 4. Test the build locally</p> <p>New Sections: 1. Create new directory under <code>docs/</code> 2. Add section to <code>nav:</code> in <code>mkdocs.yml</code> 3. Create index page for the section 4. Update landing page with section reference</p>"},{"location":"reference/maintenance/#updating-existing-content","title":"Updating Existing Content","text":"<p>Regular Updates: - Links: Verify all relative links still work after repository changes - Versions: Update version numbers for platform components - Commands: Validate operational commands and examples - Diagrams: Update Mermaid diagrams to reflect current architecture</p> <p>Triggered Updates: - Infrastructure Changes: Update platform architecture pages - New Components: Add to catalog structure documentation - Workflow Changes: Update operations and CI/CD documentation - ADR Additions: Update ADR index and cross-references</p>"},{"location":"reference/maintenance/#content-guidelines","title":"Content Guidelines","text":"<p>Linking Strategy: - Use relative links to repository files: <code>[file](../../path/to/file)</code> - Cross-reference related documentation pages - Link to line numbers for specific code references - Include anchors for long pages: <code>[section](page.md#section)</code></p> <p>Assumption Handling: - Mark inferences with <code>&gt; Assumption:</code> blocks - Propose validation steps for uncertain statements - Update assumptions based on validation results - Document assumption resolution in revision notes</p> <p>Source Citations: - Link every non-trivial claim to source files - Use relative paths for repository references - Include line numbers for specific code examples - Cite external sources with full URLs</p>"},{"location":"reference/maintenance/#diagram-management","title":"Diagram Management","text":""},{"location":"reference/maintenance/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p>All diagrams are text-based using Mermaid syntax for easy maintenance:</p> <p>Architecture Diagrams: - Keep diagrams focused on specific architectural views - Update component names to match repository changes - Validate diagram syntax with Mermaid Live Editor</p> <p>Flow Diagrams: - Document operational workflows and processes - Update process flows when procedures change - Include decision points and error handling</p> <p>Relationship Diagrams: - Show dependencies between components and systems - Update when new services or dependencies are added - Maintain consistency with Backstage catalog structure</p>"},{"location":"reference/maintenance/#diagram-update-process","title":"Diagram Update Process","text":"<ol> <li>Identify Changes: Monitor repository for architectural changes</li> <li>Update Diagrams: Modify Mermaid syntax to reflect changes</li> <li>Validate Rendering: Test diagram rendering in MkDocs</li> <li>Review Accuracy: Ensure diagrams match current state</li> <li>Update References: Update any documentation referencing the diagrams</li> </ol>"},{"location":"reference/maintenance/#build-and-deployment","title":"Build and Deployment","text":""},{"location":"reference/maintenance/#local-testing","title":"Local Testing","text":"<p>Prerequisites: <pre><code>pip install mkdocs-material\npip install mkdocs-techdocs-core\n</code></pre></p> <p>Build Commands: <pre><code># Navigate to TechDocs directory\ncd docs/techdocs\n\n# Serve locally (auto-reload)\nmkdocs serve\n\n# Build static site\nmkdocs build\n\n# Validate links and structure\nmkdocs build --strict\n</code></pre></p>"},{"location":"reference/maintenance/#automated-deployment","title":"Automated Deployment","text":"<p>GitHub Actions Workflow: on_docs_change.yml</p> <p>Trigger Conditions: - Push to <code>main</code> branch with changes in <code>docs/techdocs/**</code> - Manual workflow dispatch - Changes to the workflow file itself</p> <p>Deployment Process: 1. Generate: Uses <code>webgrip/workflows/.github/workflows/techdocs-generate.yml@main</code> 2. Deploy: Uses <code>webgrip/workflows/.github/workflows/techdocs-deploy-gh-pages.yml@main</code> 3. Publish: Site published to GitHub Pages</p>"},{"location":"reference/maintenance/#backstage-integration","title":"Backstage Integration","text":"<p>Configuration: catalog-info.yaml <pre><code>metadata:\n  annotations:\n    backstage.io/techdocs-ref: dir:./docs/techdocs\n</code></pre></p> <p>Build Process: - Backstage automatically builds TechDocs from repository - Updates appear in Backstage after repository changes - No manual intervention required for Backstage deployment</p>"},{"location":"reference/maintenance/#quality-assurance","title":"Quality Assurance","text":""},{"location":"reference/maintenance/#link-validation","title":"Link Validation","text":"<p>Automated Checks: - MkDocs build process validates internal links - Strict mode fails build on broken links - GitHub Actions workflow includes link validation</p> <p>Manual Validation: <pre><code># Check all links in documentation\nfind docs/techdocs/docs -name \"*.md\" -exec grep -l \"](../../\" {} \\;\n\n# Validate specific links\ncat docs/techdocs/docs/path/to/page.md | grep -o \"](../../[^)]*\"\n</code></pre></p>"},{"location":"reference/maintenance/#content-review","title":"Content Review","text":"<p>Regular Reviews (Quarterly): - Verify accuracy of all technical content - Update version numbers and configuration examples - Validate command examples and procedures - Review and update diagrams</p> <p>Change-Triggered Reviews: - Infrastructure changes require platform documentation updates - New workflows require operations documentation updates - Catalog changes require catalog structure updates - ADR additions require ADR section updates</p>"},{"location":"reference/maintenance/#build-validation","title":"Build Validation","text":"<p>Local Validation: <pre><code># Strict build (fail on warnings)\nmkdocs build --strict\n\n# Check for common issues\ngrep -r \"TODO\\|FIXME\\|XXX\" docs/techdocs/docs/\n\n# Validate Mermaid syntax\ngrep -A 10 -B 2 \"```mermaid\" docs/techdocs/docs/\n</code></pre></p> <p>CI Validation: - Automated build testing in GitHub Actions - Link checking and validation - Mermaid diagram syntax validation - TechDocs compatibility testing</p>"},{"location":"reference/maintenance/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/maintenance/#common-issues","title":"Common Issues","text":"<p>Build Failures: <pre><code># Check MkDocs configuration\nmkdocs config\n\n# Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('mkdocs.yml'))\"\n\n# Test individual pages\nmkdocs serve --dev-addr 127.0.0.1:8001\n</code></pre></p> <p>Broken Links: <pre><code># Find broken repository links\nfind . -name \"*.md\" -exec grep -l \"](../../\" {} \\; | \\\n  xargs grep -o \"](../../[^)]*\" | \\\n  cut -d']' -f2 | \\\n  tr -d '()' | \\\n  while read link; do\n    if [ ! -e \"$link\" ]; then\n      echo \"Broken link: $link\"\n    fi\n  done\n</code></pre></p> <p>Mermaid Rendering Issues: - Validate syntax with Mermaid Live Editor - Check for unsupported Mermaid features - Verify Mermaid plugin configuration in <code>mkdocs.yml</code></p> <p>Backstage Integration Issues: - Verify <code>backstage.io/techdocs-ref</code> annotation - Check TechDocs plugin configuration - Validate MkDocs compatibility with TechDocs</p>"},{"location":"reference/maintenance/#performance-issues","title":"Performance Issues","text":"<p>Large Site Build Times: - Review and optimize large diagrams - Consider splitting large pages into smaller sections - Optimize image sizes and formats - Use lazy loading for heavy content</p> <p>Slow Page Load: - Minimize large code blocks - Optimize Mermaid diagram complexity - Review and optimize theme customizations - Consider content caching strategies</p>"},{"location":"reference/maintenance/#maintenance-schedule","title":"Maintenance Schedule","text":""},{"location":"reference/maintenance/#weekly-tasks","title":"Weekly Tasks","text":"<ul> <li> Review recent repository changes for documentation impact</li> <li> Update version numbers if platform components updated</li> <li> Validate that new repository files are properly referenced</li> </ul>"},{"location":"reference/maintenance/#monthly-tasks","title":"Monthly Tasks","text":"<ul> <li> Run full link validation across all documentation</li> <li> Review and update Getting Started guide for accuracy</li> <li> Validate operational commands and examples</li> <li> Update any outdated screenshots or examples</li> </ul>"},{"location":"reference/maintenance/#quarterly-tasks","title":"Quarterly Tasks","text":"<ul> <li> Comprehensive content review and accuracy validation</li> <li> Update architecture diagrams for any infrastructure changes</li> <li> Review and update ADR index and cross-references</li> <li> Validate all assumptions and update based on experience</li> <li> Performance review and optimization</li> </ul>"},{"location":"reference/maintenance/#annual-tasks","title":"Annual Tasks","text":"<ul> <li> Complete information architecture review</li> <li> Technology stack updates (MkDocs, plugins, theme)</li> <li> User feedback collection and analysis</li> <li> Documentation metrics review and improvement planning</li> </ul>"},{"location":"reference/maintenance/#contributing-updates","title":"Contributing Updates","text":""},{"location":"reference/maintenance/#pull-request-checklist","title":"Pull Request Checklist","text":"<p>When updating TechDocs content:</p> <ul> <li> Content Accuracy: All claims are linked to source files</li> <li> Link Validation: All relative links work correctly</li> <li> Cross-References: Related pages are properly linked</li> <li> Assumptions: Any assumptions are marked and validation proposed</li> <li> Build Test: Local build succeeds without errors</li> <li> Diagram Updates: Mermaid diagrams render correctly</li> <li> Navigation: New pages added to <code>mkdocs.yml</code> navigation</li> <li> Style: Content follows established conventions</li> </ul>"},{"location":"reference/maintenance/#maintenance-team-responsibilities","title":"Maintenance Team Responsibilities","text":"<p>Primary Maintainers: Infrastructure Team - Review and approve documentation updates - Coordinate with domain experts for technical accuracy - Manage TechDocs build and deployment issues - Maintain documentation standards and guidelines</p> <p>Content Contributors: All Team Members - Update documentation when making repository changes - Provide domain expertise for technical content - Report documentation issues and gaps - Suggest improvements and optimizations</p>"},{"location":"reference/maintenance/#next-steps","title":"Next Steps","text":"<ul> <li>Update Content: Review and update documentation for recent changes</li> <li>Validate Links: Run link validation and fix any broken references</li> <li>Review Assumptions: Validate marked assumptions with domain experts</li> <li>Optimize Performance: Review build times and page load performance</li> <li>Gather Feedback: Collect user feedback on documentation effectiveness</li> </ul>"}]}